Hello and welcome to the first course in the Embedded Software
Essentials Specialization. I'm Alex Fosdick. And I've been working with embedded
systems and microcontrollers for nearly ten years, both as a practicing
engineer and as a teacher. In this course, you will start to gain
experience in analyzing, building and implementing software for
embedded systems. Nearly all embedded systems contain
a processing core like a micro controller. And these require the design of low
level software in order to function. However, software design is just one piece
of the embedded system that a software engineer must be familiar with. You must start with the environment you
design in or the development platform. There are many components to
the development platform an engineer uses. Building experience with this platform
will allow you to go about developing software for a variety of embedded systems
quickly, efficiently and optimized. The development platform
components include a host machine, a development environment to write and
test code in. A compiler toolchain to generate designs,
development kits to integrate with, and version control to track software history. A software engineer interacts with all of
these components usually on a daily basis. With in-depth practice and conceptual understanding of utilizing our
embedded systems development environment. You can easily set up, apply tools and
start coding for many embedded platforms. These topics will be broken up
into a collection of modules, with many videos and
hands on learning experiences. This course starts by first defining all
parts of the Embedded Systems including the enviroment, hardware and software. We will take time to review some basic
C-Programing concepts and syntax. We then start discussing the components
of Software Configuration Management, or SCM for short. SCM indicates how you will organize and
manage software project. This is not just project management. But also the details on implementation
of different parts of components and processes. Including your
Software Version Control with Git. You'll be spending a lot of time compiling
software with a GCC Tool chain and GNU Make. With the tool chain we'll be able
to break up our build process and analyze compiled code. We then finish up the module with low
level concepts of memory systems for our embedded architecture. This includes memory systems,
software to hardware memory interface, and writing code for
different program segments. This course will not be
a basic programming or microcontroller course
where you blink an LED. Instead I will give you a full systems
view for embedded software design. You will explore detailed hands on
applications of running different types of software for industry level applications. This course will require you to set
your own development environment in order to complete assignments. There'll be some hardware requirements for
this specialization and we will discuss those
more in later videos. Students should come into this course
with a C programming background and some experience of embedded systems. You will not need to be an expert in
all things electrical engineering or programming. But understanding the concepts. Like current, voltage, power,
some electrical elements and some basic computer
architecture is very important. Most importantly,
low level concepts in Assembly and some background in Assembly Language
programming will be important for utmost success in the course. At the end of this course, you'll be able to define
the components of an embedded system. Implement software configuration
management including development environments, Git version control, and
GNU's Compiler Collection and GNU Make. Develop both portable and
architecture specific software for embedded systems in C-programming. Let's get started. See you in the next video.