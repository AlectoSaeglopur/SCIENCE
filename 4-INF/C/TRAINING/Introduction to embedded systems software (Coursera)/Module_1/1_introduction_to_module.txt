Welcome to the first module of
the embedded software essential specialization. In this module, we'll explore the components of
the embedded systems design platform. Designing embedded systems takes
a lot expertise in both hardware and software disciplines. Writing code for an embedded system is not just as simple
as knowing how to write a C program. Embedded software engineers need to have
expertise and understanding hardware concepts, knowing how to correctly
write and design low-level software, and knowing how to use tools to
interact and evaluate their platform. We will cover all aspects of
what software essentials means throughout this specialization. Embedded software engineers start their
code development process on a host machine, working with tools like
compilers, debuggers, and version control. A significant amount of time is spent away
from hardware, as you develop code and prepare it to test on your
target embedded system. For your software development environment,
you will interact directly with tools like GCC, GNU Make, Linux Command Line,
Version Control, and an IDE. You'll become familiar with these first,
and we'll want to use these tools
throughout the specialization. So there are some software requirements
for the local environment that you'll need to install and
set up before you begin any development. Depending on the development kit,
you'll need to install the vendor provided Integrated Development
Environment, or IDE. You will need to install a Serial Terminal
program that we can interact with later in the course. I suggest RealTerm for this. The next thing you will need is to get
access to a Linux development environment. For this, I suggest using VirtualBox
with an Ubuntu Linux image. And this is what we'll
be using in video demos. Using Hypervisor, besides VirtualBox,
is fine, if you know what you're doing. We will use the latest Ubuntu release, but
you're free to use any Linux distribution, as long as the tools can
install correctly and you have experience with developing in it. However, if you have issues, you'll
need to figure out the solution since we'll only be validating course materials
through the provided environment. Depending on your host machine OS,
you may have issues with some of these software tools if they aren't
supported on your machine. No matter, you can still use
VirtualBox to help with this. Within Linux, you'll need to install some
specific packages for our course tool set. These include git, a host version of GCC,
and the Embedded GCC Cross-Compiler. In addition, you'll need a method for
editing files in Linux. Here you can choose whatever
file editor you'd like. I will provide examples using Vim, but
if you prefer a GUI-based editor for software, then Sublime Text
is a good choice. If you are new to some of these tools,
the Internet or the class forums are a good
place to seek help. Part of the job in software engineering is
becoming familiar with installing these tools and the pain to get them set up. You'll experience this more and more as you work on different
projects throughout your career. In fact, I chose some of these tools because of the
regularity that they are used in industry. This course is not meant to be
an intro to programming course. Lots of materials will be covered and you
will walk away with an enormous amount of experience and a better software design. Using our tools effectively will
speed up our development and our ability to solve problems. All of the software tools will be
needed immediately in the module, but the hardware won't be needed
until later in modules. You will have time to procure them. There will be a tutorial and
documentation provided to get them set up. The software and hardware tools will
give you hands-on interaction with the conceptual topics in the course. The first course, and the first module,
present introductory material to our embedded platform and
the use of these tools. We will begin by introducing
the tool sets and the environments that will be used
throughout the project development. The tool set you'll use throughout
this specialization will equip you with experience in industry level
embedded system software development.