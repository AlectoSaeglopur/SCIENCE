
§ difference between UART, SPI, I2C? >> UART not based on master-slave concept, so both terminals can transmit whenever they want.

§ in C++ can a child-class inherit a method from a parental-class and overwrite it? >> yes, using the "::" kewword.

§ if you receive a 3rd-part code, how do you check if this is optimized? >> look at the .map file generated by the linker to check if some library is consuming a huge part of program memory or to check if (assuming an OS is present) some task is experiencing starvation issues since other higher-priority tasks are consuming the bulk of the CPU time.

§ how do you move variables between different files? with keyword "extern"? >> always define variables as static and create dedicated get/set functions only if needed.

§ practical test: create some simple code to revert the string "Electrolux" (i.e. expected output is "xulortcelE") >> easy, just keep in mind each string terminates with a "NUL" char.

§ how data memory (aka RAM) is divided? >> [1] region for global variables (defined outside functions or as "static" inside functions), [2] stack (for variables created and destroyed inside functions, following a first-in/last-out policy), and [3] heap (for dynamic allocation).

§ what's the difference in terms of memory allocation if you define a uint8/uint32 variables pair as standalone or inside a struct? >> see dedicated section in "SCIENCE > 4-INF > C > memory_alignment.txt".

§ which kind UML graphs do you usually use? >> so far i used "deployment diagrams" for describing the FW architecture (plus interactions between software modules and MCU hardware unit), and "state/activity diagrams" for showing SW modules operation through flowgraphs (e.g. driver for e-paper display).

§ how firmware development is handled in your team? >> we use the Scrum approach (new tasks are given every x2 weeks), and the versioning is done with Git (with pull-request for merging back to main branch) linked automatically with Jira (to keep track of each activity and link the related ticket to the specific developer).

