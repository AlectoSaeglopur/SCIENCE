"""
" Title: DIGITAL FREQUENCY MODULATORS (FSK, CPFSK AND GFSK)
" Author: Filippo Valmori
" Date: 21/06/2020
" Reference: [1] https://en.wikipedia.org/wiki/Frequency-shift_keying
"""

# GUI module generated by PAGE version 5.3
#  in conjunction with Tcl version 8.6
#    Jun 20, 2020 12:04:27 PM CEST  platform: Windows NT

import sys
import matplotlib.pyplot as mpl
from Lib_FreqMods import *

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import GUI_FreqMods_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    GUI_FreqMods_support.set_Tk_var()
    top = Toplevel1 (root)
    GUI_FreqMods_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    GUI_v2_support.set_Tk_var()
    top = Toplevel1 (w)
    GUI_v2_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])


        ### CUSTOM FUNCTIONSS ###

        def Update_FlagFsk() :
            FlagFsk.set(not(FlagFsk.get()))                                         # Invert checkbutton value upon pressure
            if FlagFsk.get() == True :
                self.Text1.configure(state='normal')                                # Set the textbox as writable
                self.Text1.insert(tk.END,' \u2022 FSK : on\n')                      # Write new line in textbox  
                self.Text1.configure(state='disabled')                              # Reset the textbox as read-only
                self.Text1.update()                                                 # To update textbox
                # print(' - FSK option enabled\n')
            else :
                self.Text1.configure(state='normal')
                self.Text1.insert(tk.END,' \u2022 FSK : off\n')
                self.Text1.configure(state='disabled')
                self.Text1.update()
                # print(' - FSK option disabled\n')

        def Update_FlagCpfsk() :
            FlagCpfsk.set(not(FlagCpfsk.get()))
            if FlagCpfsk.get() == True :
                self.Text1.configure(state='normal')
                self.Text1.insert(tk.END,' \u2022 CPFSK : on\n')
                self.Text1.configure(state='disabled')
                self.Text1.update()
            else :
                self.Text1.configure(state='normal')
                self.Text1.insert(tk.END,' \u2022 CPFSK : off\n')
                self.Text1.configure(state='disabled')
                self.Text1.update()

        def Update_FlagGfsk() :
            FlagGfsk.set(not(FlagGfsk.get()))
            if FlagGfsk.get() == True :
                self.Text1.configure(state='normal')
                self.Text1.insert(tk.END,' \u2022 GFSK : on\n')
                self.Text1.configure(state='disabled')
                self.Text1.update()
            else :
                self.Text1.configure(state='normal')
                self.Text1.insert(tk.END,' \u2022 GFSK : off\n')
                self.Text1.configure(state='disabled')
                self.Text1.update()

        def Update_FlagSdr() :
            FlagSdr.set(not(FlagSdr.get()))
            if FlagSdr.get() == True :
                self.Text1.configure(state='normal')
                self.Text1.insert(tk.END,' \u2022 SDR Bin : on\n')
                self.Text1.configure(state='disabled')
                self.Text1.update()
            else :
                self.Text1.configure(state='normal')
                self.Text1.insert(tk.END,' \u2022 SDR Bin : off\n')
                self.Text1.configure(state='disabled')
                self.Text1.update()

        def Launch_Processing() :
            if FlagFsk.get() or FlagCpfsk.get() or FlagGfsk.get() :
                Clear_MsgWindow()
                Clear_Plots()
                self.Text1.configure(state='normal')
                self.Text1.insert(tk.END,' Processing...\n\n')
                self.Text1.configure(state='disabled')
                self.Text1.update()
                Exe_FreqMods()
            else :
                self.Text1.configure(state='normal')
                self.Text1.insert(tk.END,' \u2022 Nothing to process!\n')
                self.Text1.configure(state='disabled')
                self.Text1.update()

        def Clear_MsgWindow() :
            self.Text1.configure(state='normal')
            self.Text1.delete('1.0', tk.END)                                        # clear all textbox content
            self.Text1.configure(state='disabled')
            self.Text1.update()

        def Clear_Plots() :
            mpl.close('all')

        def RecapParam( AllPars ) :
            self.Text1.configure(state='normal')
            self.Text1.insert(tk.END,' \u2022 Processed bits = '+str(AllPars[0]))
            self.Text1.insert(tk.END,'\n \u2022 Bit rate = '+str(AllPars[1]/1e3)+' kb/s')
            self.Text1.insert(tk.END,'\n \u2022 Modulation order = '+str(AllPars[2]))
            self.Text1.insert(tk.END,'\n \u2022 Symbol rate = '+str(AllPars[10]/1e3)+' kS/s')
            self.Text1.insert(tk.END,'\n \u2022 Modulation index = '+str(AllPars[3]))
            self.Text1.insert(tk.END,'\n \u2022 Deviation = '+str(AllPars[11]/1e3)+' kHz')
            self.Text1.insert(tk.END,'\n \u2022 Baseband osf = '+str(AllPars[4]))
            self.Text1.insert(tk.END,'\n \u2022 BB sample rate = '+str(AllPars[12]/1e3)+' kSa/s')
            self.Text1.insert(tk.END,'\n \u2022 RF frequency = '+str(AllPars[9]/1e6)+' MHz')
            self.Text1.insert(tk.END,'\n \u2022 RF sample rate = '+str(AllPars[13]/1e6)+' MSa/s')
            if AllPars[14] == True :
                self.Text1.insert(tk.END,'\n \u2022 Gaussian span = '+str(AllPars[5])+' S')
                self.Text1.insert(tk.END,'\n \u2022 Gaussian sps = '+str(AllPars[6])+' Sa/S')
                self.Text1.insert(tk.END,'\n \u2022 Gaussian BT = '+str(AllPars[7]))
            if AllPars[15] == True :
                self.Text1.insert(tk.END,'\n \u2022 SDR sample rate = '+str(AllPars[8]/1e3)+' kSa/s')
            self.Text1.insert(tk.END,'\n')
            self.Text1.configure(state='disabled')
            self.Text1.update()




            # [0,1,2,3,4,span,sps,BT,FsSdr,9,10,11,12,13,
            #     FlagGfsk.get(),sdr]

        
        def Exe_FreqMods( ) :
            Nbits = int(self.Entry_Nbits.get())
            Rb = float(self.Entry_Rb.get())                                         # Read bit rate entry
            M = int(self.Entry_M.get())                                             # Read modulation order entry
            h = float(self.Entry_h.get())
            osf = int(self.Entry_osf.get())
            span = int(self.Entry_span.get())
            sps = int(self.Entry_sps.get())
            BT = float(self.Entry_BT.get())
            FsSdr = float(self.Entry_FsSdr.get())

            Fc = 1e6                                                                # Carrier frequency [Hz]
            Rs = Rb/log2(M)                                                         # Symbol rate [S/s]
            dev = h*Rs/2                                                            # Inner frequency deviation [Hz]
            FsBB = osf*Rs                                                           # Baseband sample rate [Sa/s]
            TsBB = 1/FsBB                                                           # Baseband sample period [s]
            FsRF = 12*Fc                                                            # RF sample rate [Sa/s]
            ItpMet = 'LIN'                                                          # Interpolating method (LIN or CUB) to pass from BB to RF signal
            ScFct = 1e3                                                             # Baseband scaling factor (e.g. 1e3 means ms/kHz)
            WaveBBxlim = 1e-3*ScFct                                                 # Limit on X-axis for BB time plot [ms]
            SpectBBxlim = FsBB/2e3                                                  # Limit on X-axis for BB spectrum plot [kHz]
            SpectBBylim = -120                                                      # Limit on Y-axis for BB spectrum plot [dBW]
            SpanRFxlim = 10*Rs                                                      # Span on X-axis for RF spectrum plot [Hz]
            SpectRFylim = -110                                                      # Limit on Y-axis for RF spectrum plot [dBW]

            # PROCESSING #
            CheckParam(M,Nbits,osf)                                                 # Check the parameters correctness
            [Symbs,Nsymbs] = GetSymbs(Nbits,M)                                      # Retrieve random symbols stream and its length
            [TimeBB,FrSamps] = GetFrSamps(dev,Symbs,osf,TsBB)
            # FSK #
            if FlagFsk.get() == True :
                [FskWaveI,FskWaveQ] = FskModulator(FrSamps,TimeBB)            
                [FskFreqBB,FskSpectBB] = GetSpect(FskWaveI+1j*FskWaveQ,FsBB)
                [TimeRF,FskSgnRF] = InterpRF(TimeBB,FskWaveI+1j*FskWaveQ,FsRF,ItpMet,Fc)
                [FskFreqRF,FskSpectRF] = GetSpect(FskSgnRF,FsRF)
                if FlagSdr.get() == True :
                    [SdrWaveI,SdrWaveQ] = InterpSdr(TimeBB,FskWaveI+1j*FskWaveQ,FsSdr)
                    StoreIntoBin(SdrWaveI,SdrWaveQ,'FSK')
                self.Text1.configure(state='normal')
                self.Text1.insert(tk.END,' - FSK completed\n')
                self.Text1.configure(state='disabled')
                self.Text1.update()
            # CPFSK #
            if FlagCpfsk.get() == True :
                [CpfskPcmPh,CpfskWaveI,CpfskWaveQ] = CpfskModulator(FrSamps,TsBB)
                [CpfskFreqBB,CpfskSpectBB] = GetSpect(CpfskWaveI+1j*CpfskWaveQ,FsBB)
                [TimeRF,CpfskSgnRF] = InterpRF(TimeBB,CpfskWaveI+1j*CpfskWaveQ,FsRF,ItpMet,Fc)
                [CpfskFreqRF,CpfskSpectRF] = GetSpect(CpfskSgnRF,FsRF)
                if FlagSdr.get() == True :
                    [SdrWaveI,SdrWaveQ] = InterpSdr(TimeBB,CpfskWaveI+1j*CpfskWaveQ,FsSdr)
                    StoreIntoBin(SdrWaveI,SdrWaveQ,'CPFSK')
                self.Text1.configure(state='normal')
                self.Text1.insert(tk.END,' - CPFSK completed\n')
                self.Text1.configure(state='disabled')
                self.Text1.update()
            # GFSK #
            if FlagGfsk.get() == True :
                GaussTaps = GetGaussTaps(BT,span,sps)
                GfskFrShift = FirFilter(FrSamps,GaussTaps)
                [GfskPcmPh,GfskWaveI,GfskWaveQ] = GfskModulator(GfskFrShift,TsBB)
                [GfskFreqBB,GfskSpectBB] = GetSpect(GfskWaveI+1j*GfskWaveQ,FsBB)
                [TimeRF,GfskSgnRF] = InterpRF(TimeBB,GfskWaveI+1j*GfskWaveQ,FsRF,ItpMet,Fc)
                [GfskFreqRF,GfskSpectRF] = GetSpect(GfskSgnRF,FsRF)
                if FlagSdr.get() == True :
                    [SdrWaveI,SdrWaveQ] = InterpSdr(TimeBB,GfskWaveI+1j*GfskWaveQ,FsSdr)
                    StoreIntoBin(SdrWaveI,SdrWaveQ,'GFSK')
                self.Text1.configure(state='normal')
                self.Text1.insert(tk.END,' - GFSK completed\n')
                self.Text1.configure(state='disabled')
                self.Text1.update()
            # PLOTS #
            self.Text1.configure(state='normal')
            self.Text1.insert(tk.END,'\n Plotting...\n\n')
            self.Text1.configure(state='disabled')
            self.Text1.update()
            if FlagFsk.get() == True :
                Fig_1 = mpl.figure(num='FSK')
                Fig_1.subplots_adjust(wspace=.25, hspace=.4)
                mpl.subplot(221)
                mpl.stem(range(Nsymbs*osf), [i/ScFct for i in FrSamps],  linefmt='orange',
                    markerfmt='orange', basefmt='orange', use_line_collection=True)
                mpl.xlabel('Sample [#]') 
                mpl.ylabel('Frequency Shift [kHz]')
                mpl.title('PCM WAVEFORM')
                mpl.xlim(-0.05*Nsymbs*osf, 1.05*Nsymbs*osf)
                mpl.ylim((1-M)*dev*1.2/ScFct, (M-1)*dev*1.2/ScFct)
                mpl.grid(color='silver', linestyle='--', linewidth=1)
                mpl.subplot(222)
                mpl.plot([i*ScFct for i in TimeBB], FskWaveI, color='red', linestyle='-', linewidth=1, 
                    marker='o', markerfacecolor='r', markersize=2, label="In-phase")
                mpl.plot([i*ScFct for i in TimeBB], FskWaveQ, color='blue', linestyle='--', linewidth=1, 
                    marker='o', markerfacecolor='b', markersize=2, label="Quadrature")
                mpl.xlabel('Time [ms]') 
                mpl.ylabel('Amplitude [V]')
                mpl.title('BASEBAND WAVEFORM')
                mpl.xlim(0, WaveBBxlim)
                mpl.ylim(-1.2, 1.2)
                mpl.legend()
                mpl.grid(color='silver', linestyle='--', linewidth=1)
                mpl.subplot(223)
                mpl.plot([i/ScFct for i in FskFreqBB], FskSpectBB, color='limegreen', linestyle='-', linewidth=1)
                mpl.xlabel('Frequency [kHz]')
                mpl.ylabel('Power [dBW]')
                mpl.title('BASEBAND SPECTRUM')
                mpl.xlim(-SpectBBxlim, SpectBBxlim)
                mpl.ylim(SpectBBylim, 0)
                mpl.grid(color='silver', linestyle='--', linewidth=1)
                mpl.subplot(224)
                mpl.plot([i/1e6 for i in FskFreqRF], FskSpectRF, color='darkviolet', linestyle='-', linewidth=1)
                mpl.xlabel('Frequency [MHz]')
                mpl.ylabel('Power [dBW]')
                mpl.title('BANDPASS SPECTRUM')
                mpl.xlim((Fc-SpanRFxlim)/1e6, (Fc+SpanRFxlim)/1e6)
                mpl.ylim(SpectRFylim, 0)
                mpl.grid(color='silver', linestyle='--', linewidth=1)
            if FlagCpfsk.get() == True :
                Fig_2 = mpl.figure(num='CPFSK')
                Fig_2.subplots_adjust(wspace=.25, hspace=.4)
                mpl.subplot(221)
                mpl.stem(range(Nsymbs*osf), CpfskPcmPh,  linefmt='orange',
                    markerfmt='orange', basefmt='orange', use_line_collection=True)
                mpl.xlabel('Sample [#]') 
                mpl.ylabel('Phase Shift [rad]')
                mpl.title('PCM WAVEFORM')
                mpl.xlim(-0.05*Nsymbs*osf, 1.05*Nsymbs*osf)
                mpl.ylim(min(CpfskPcmPh)-5, max(CpfskPcmPh)+5)
                mpl.grid(color='silver', linestyle='--', linewidth=1)
                mpl.subplot(222)
                mpl.plot([(i+TsBB)*ScFct for i in TimeBB], CpfskWaveI, color='red', linestyle='-', linewidth=1, 
                    marker='o', markerfacecolor='r', markersize=2, label="In-phase")
                mpl.plot([(i+TsBB)*ScFct for i in TimeBB], CpfskWaveQ, color='blue', linestyle='--', linewidth=1, 
                    marker='o', markerfacecolor='b', markersize=2, label="Quadrature")
                mpl.xlabel('Time [ms]') 
                mpl.ylabel('Amplitude [V]')
                mpl.title('BASEBAND WAVEFORM')
                mpl.xlim(0, WaveBBxlim)
                mpl.ylim(-1.2, 1.2)
                mpl.legend()
                mpl.grid(color='silver', linestyle='--', linewidth=1)
                mpl.subplot(223)
                mpl.plot([i/ScFct for i in CpfskFreqBB], CpfskSpectBB, color='limegreen', linestyle='-', linewidth=1)
                mpl.xlabel('Frequency [kHz]')
                mpl.ylabel('Power [dBW]')
                mpl.title('BASEBAND SPECTRUM')
                mpl.xlim(-SpectBBxlim, SpectBBxlim)
                mpl.ylim(SpectBBylim, 0)
                mpl.grid(color='silver', linestyle='--', linewidth=1)
                mpl.subplot(224)
                mpl.plot([i/1e6 for i in CpfskFreqRF], CpfskSpectRF, color='darkviolet', linestyle='-', linewidth=1)
                mpl.xlabel('Frequency [MHz]')
                mpl.ylabel('Power [dBW]')
                mpl.title('BANDPASS SPECTRUM')
                mpl.xlim((Fc-SpanRFxlim)/1e6, (Fc+SpanRFxlim)/1e6)
                mpl.ylim(SpectRFylim, 0)
                mpl.grid(color='silver', linestyle='--', linewidth=1)
            if FlagGfsk.get() == True :
                Fig_3 = mpl.figure(num='GFSK')
                Fig_3.subplots_adjust(wspace=.25, hspace=.4)
                mpl.subplot(221)
                mpl.stem(range(Nsymbs*osf), GfskPcmPh,  linefmt='orange',
                    markerfmt='orange', basefmt='orange', use_line_collection=True)
                mpl.xlabel('Sample [#]') 
                mpl.ylabel('Phase Shift [rad]')
                mpl.title('PCM WAVEFORM')
                mpl.xlim(-0.05*Nsymbs*osf, 1.05*Nsymbs*osf)
                mpl.ylim(min(GfskPcmPh)-5, max(GfskPcmPh)+5)
                mpl.grid(color='silver', linestyle='--', linewidth=1)
                mpl.subplot(222)
                mpl.plot([(i+TsBB)*ScFct for i in TimeBB], GfskWaveI, color='red', linestyle='-', linewidth=1, 
                    marker='o', markerfacecolor='r', markersize=2, label="In-phase")
                mpl.plot([(i+TsBB)*ScFct for i in TimeBB], GfskWaveQ, color='blue', linestyle='--', linewidth=1, 
                    marker='o', markerfacecolor='b', markersize=2, label="Quadrature")
                mpl.xlabel('Time [ms]') 
                mpl.ylabel('Amplitude [V]')
                mpl.title('BASEBAND WAVEFORM')
                mpl.xlim(0, WaveBBxlim)
                mpl.ylim(-1.2, 1.2)
                mpl.legend()
                mpl.grid(color='silver', linestyle='--', linewidth=1)
                mpl.subplot(223)
                mpl.plot([i/ScFct for i in GfskFreqBB], GfskSpectBB, color='limegreen', linestyle='-', linewidth=1)
                mpl.xlabel('Frequency [kHz]')
                mpl.ylabel('Power [dBW]')
                mpl.title('BASEBAND SPECTRUM')
                mpl.xlim(-SpectBBxlim, SpectBBxlim)
                mpl.ylim(SpectBBylim, 0)
                mpl.grid(color='silver', linestyle='--', linewidth=1)
                mpl.subplot(224)
                mpl.plot([i/1e6 for i in GfskFreqRF], GfskSpectRF, color='darkviolet', linestyle='-', linewidth=1)
                mpl.xlabel('Frequency [MHz]')
                mpl.ylabel('Power [dBW]')
                mpl.title('BANDPASS SPECTRUM')
                mpl.xlim((Fc-SpanRFxlim)/1e6, (Fc+SpanRFxlim)/1e6)
                mpl.ylim(SpectRFylim, 0)
                mpl.grid(color='silver', linestyle='--', linewidth=1)
            mpl.show(block=False)                                                   # Show plots
            # PRINT PARAMETERS
            AllPars = [Nbits,Rb,M,h,osf,span,sps,BT,FsSdr,Fc,Rs,dev,FsBB,FsRF,
                FlagGfsk.get(),FlagSdr.get()]
            RecapParam(AllPars)


        ### MAIN WINDOW APPEARANCE ###
        
        top.geometry("580x525+587+261")                                             # Set main window dimensions and position                     
        top.minsize(120, 1)
        top.maxsize(3844, 1061)
        top.resizable(1, 1) 
        top.title("FREQUENCY MODULATOR GUI - Filippo Valmori")                      # Set main window title 
        top.configure(background='whitesmoke')                                      # Set main window color 

        self.Labelframe1 = tk.LabelFrame(top)
        self.Labelframe1.place(relx=0.05, rely=0.05, relheight=0.64, relwidth=0.4)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(text='''PARAMETERS''',font=("Courier",12,"bold"))
        self.Labelframe1.configure(background='whitesmoke')

        self.Labelframe2 = tk.LabelFrame(top)
        self.Labelframe2.place(relx=0.05, rely=0.73, relheight=0.2, relwidth=0.4)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(foreground="black")
        self.Labelframe2.configure(text='''OPTIONS''',font=("Courier",12,"bold"))
        self.Labelframe2.configure(background='whitesmoke')

        self.Labelframe3 = tk.LabelFrame(top)
        self.Labelframe3.place(relx=0.51, rely=0.05, relheight=0.2, relwidth=0.44)
        self.Labelframe3.configure(relief='groove')
        self.Labelframe3.configure(foreground="black")
        self.Labelframe3.configure(text='''KEYS''',font=("Courier",12,"bold"))
        self.Labelframe3.configure(background='whitesmoke')

        self.Labelframe4 = tk.LabelFrame(top)
        self.Labelframe4.place(relx=0.51, rely=0.29, relheight=0.64, relwidth=0.44)
        self.Labelframe4.configure(relief='groove')
        self.Labelframe4.configure(foreground="black")
        self.Labelframe4.configure(text='''MESSAGES''',font=("Courier",12,"bold"))
        self.Labelframe4.configure(background='whitesmoke')

        self.Button_RUN = tk.Button(top, command=Launch_Processing)
        self.Button_RUN.place(relx=0.55, rely=0.12, height=40, width=60)
        self.Button_RUN.configure(activebackground="#ececec")
        self.Button_RUN.configure(activeforeground="#000000")
        self.Button_RUN.configure(background='springgreen')
        self.Button_RUN.configure(disabledforeground="#a3a3a3")
        self.Button_RUN.configure(foreground='black')
        self.Button_RUN.configure(highlightbackground="#d9d9d9")
        self.Button_RUN.configure(highlightcolor="black")
        self.Button_RUN.configure(pady="0")
        self.Button_RUN.configure(text='''Run''')

        self.Button_CLRW = tk.Button(top, command=Clear_MsgWindow)
        self.Button_CLRW.place(relx=0.677, rely=0.12, height=40, width=60)
        self.Button_CLRW.configure(activebackground="#ececec")
        self.Button_CLRW.configure(activeforeground="#000000")
        self.Button_CLRW.configure(background='lightsalmon')
        self.Button_CLRW.configure(disabledforeground="#a3a3a3")
        self.Button_CLRW.configure(foreground='black')
        self.Button_CLRW.configure(highlightbackground="#d9d9d9")
        self.Button_CLRW.configure(highlightcolor="black")
        self.Button_CLRW.configure(pady="0")
        self.Button_CLRW.configure(text='''Clear\nWindow''')

        self.Button_CLRP = tk.Button(top, command=Clear_Plots)
        self.Button_CLRP.place(relx=0.805, rely=0.12, height=40, width=60)
        self.Button_CLRP.configure(activebackground="#ececec")
        self.Button_CLRP.configure(activeforeground="#000000")
        self.Button_CLRP.configure(background='lightskyblue')
        self.Button_CLRP.configure(disabledforeground="#a3a3a3")
        self.Button_CLRP.configure(foreground="#000000")
        self.Button_CLRP.configure(highlightbackground="#d9d9d9")
        self.Button_CLRP.configure(highlightcolor="black")
        self.Button_CLRP.configure(pady="0")
        self.Button_CLRP.configure(text='''Close\nPlots''')

        FlagFsk = tk.IntVar()                                                       # Link checkbutton to variable and updating function
        self.Checkbutton_FSK = tk.Checkbutton(top, variable=FlagFsk, command=Update_FlagFsk)              
        self.Checkbutton_FSK.place(relx=0.1, rely=0.78, relheight=0.048, relwidth=0.092)
        self.Checkbutton_FSK.configure(activebackground="#ececec")
        self.Checkbutton_FSK.configure(activeforeground="#000000")
        self.Checkbutton_FSK.configure(background='whitesmoke')
        self.Checkbutton_FSK.configure(disabledforeground="#a3a3a3")
        self.Checkbutton_FSK.configure(foreground="#000000")
        self.Checkbutton_FSK.configure(highlightbackground="#d9d9d9")
        self.Checkbutton_FSK.configure(highlightcolor="black")
        self.Checkbutton_FSK.configure(justify='left')
        self.Checkbutton_FSK.configure(text='''FSK''',font=("Helvetica", 10))
        self.Checkbutton_FSK.configure(variable=GUI_FreqMods_support.che45)

        FlagCpfsk = tk.IntVar()
        self.Checkbutton_CPFSK = tk.Checkbutton(top, variable=FlagCpfsk, command=Update_FlagCpfsk)
        self.Checkbutton_CPFSK.place(relx=0.26, rely=0.78, relheight=0.048, relwidth=0.107)
        self.Checkbutton_CPFSK.configure(activebackground="#ececec")
        self.Checkbutton_CPFSK.configure(activeforeground="#000000")
        self.Checkbutton_CPFSK.configure(background='whitesmoke')
        self.Checkbutton_CPFSK.configure(disabledforeground="#a3a3a3")
        self.Checkbutton_CPFSK.configure(foreground="#000000")
        self.Checkbutton_CPFSK.configure(highlightbackground="#d9d9d9")
        self.Checkbutton_CPFSK.configure(highlightcolor="black")
        self.Checkbutton_CPFSK.configure(justify='left')
        self.Checkbutton_CPFSK.configure(text='''CPFSK''',font=("Helvetica", 10))
        self.Checkbutton_CPFSK.configure(variable=GUI_FreqMods_support.che46)

        FlagGfsk = tk.IntVar()
        self.Checkbutton_GFSK = tk.Checkbutton(top, variable=FlagGfsk, command=Update_FlagGfsk)
        self.Checkbutton_GFSK.place(relx=0.1, rely=0.85, relheight=0.048, relwidth=0.105)
        self.Checkbutton_GFSK.configure(activebackground="#ececec")
        self.Checkbutton_GFSK.configure(activeforeground="#000000")
        self.Checkbutton_GFSK.configure(background='whitesmoke')
        self.Checkbutton_GFSK.configure(disabledforeground="#a3a3a3")
        self.Checkbutton_GFSK.configure(foreground="#000000")
        self.Checkbutton_GFSK.configure(highlightbackground="#d9d9d9")
        self.Checkbutton_GFSK.configure(highlightcolor="black")
        self.Checkbutton_GFSK.configure(justify='left')
        self.Checkbutton_GFSK.configure(text='''GFSK''',font=("Helvetica", 10))
        self.Checkbutton_GFSK.configure(variable=GUI_FreqMods_support.che73)

        FlagSdr = tk.IntVar()
        self.Checkbutton_SDR = tk.Checkbutton(top, variable=FlagSdr, command=Update_FlagSdr)
        self.Checkbutton_SDR.place(relx=0.26, rely=0.85, relheight=0.048, relwidth=0.122)
        self.Checkbutton_SDR.configure(activebackground="#ececec")
        self.Checkbutton_SDR.configure(activeforeground="#000000")
        self.Checkbutton_SDR.configure(background='whitesmoke')
        self.Checkbutton_SDR.configure(disabledforeground="#a3a3a3")
        self.Checkbutton_SDR.configure(foreground="#000000")
        self.Checkbutton_SDR.configure(highlightbackground="#d9d9d9")
        self.Checkbutton_SDR.configure(highlightcolor="black")
        self.Checkbutton_SDR.configure(justify='left')
        self.Checkbutton_SDR.configure(text='''SDR BIN''',font=("Helvetica", 10))
        self.Checkbutton_SDR.configure(variable=GUI_FreqMods_support.che74)

        self.Message_osf = tk.Message(top)
        self.Message_osf.place(relx=0.072, rely=0.3, relheight=0.072, relwidth=0.141)
        self.Message_osf.configure(background='whitesmoke')
        self.Message_osf.configure(cursor="fleur")
        self.Message_osf.configure(foreground="#000000")
        self.Message_osf.configure(highlightbackground="#d9d9d9")
        self.Message_osf.configure(highlightcolor="black")
        self.Message_osf.configure(text='''Oversampling factor [Sa/S]''',font=("Helvetica", 10, "normal", "italic"))
        self.Message_osf.configure(width=82)

        self.Message_M = tk.Message(top)
        self.Message_M.place(relx=0.065, rely=0.195, relheight=0.044, relwidth=0.172)
        self.Message_M.configure(background='whitesmoke')
        self.Message_M.configure(cursor="fleur")
        self.Message_M.configure(foreground="#000000")
        self.Message_M.configure(highlightbackground="#d9d9d9")
        self.Message_M.configure(highlightcolor="black")
        self.Message_M.configure(text='''Modultion order''',font=("Helvetica", 10, "normal", "italic"))
        self.Message_M.configure(width=100)

        self.Message_Nbits = tk.Message(top)
        self.Message_Nbits.place(relx=0.072, rely=0.1, relheight=0.034, relwidth=0.152)
        self.Message_Nbits.configure(background='whitesmoke')
        self.Message_Nbits.configure(foreground="#000000")
        self.Message_Nbits.configure(highlightbackground="#d9d9d9")
        self.Message_Nbits.configure(highlightcolor="black")
        self.Message_Nbits.configure(text='''Number of bits''',font=("Helvetica", 10, "normal", "italic"))
        self.Message_Nbits.configure(width=88)

        self.Message_h = tk.Message(top)
        self.Message_h.place(relx=0.073, rely=0.245, relheight=0.044, relwidth=0.172)
        self.Message_h.configure(background='whitesmoke')
        self.Message_h.configure(cursor="fleur")
        self.Message_h.configure(foreground="#000000")
        self.Message_h.configure(highlightbackground="#d9d9d9")
        self.Message_h.configure(highlightcolor="black")
        self.Message_h.configure(text='''Modulation index''',font=("Helvetica", 10, "normal", "italic"))
        self.Message_h.configure(width=100)

        self.Message_span = tk.Message(top)
        self.Message_span.place(relx=0.051, rely=0.38, relheight=0.072, relwidth=0.142)
        self.Message_span.configure(background='whitesmoke')
        self.Message_span.configure(foreground="#000000")
        self.Message_span.configure(highlightbackground="#d9d9d9")
        self.Message_span.configure(highlightcolor="black")
        self.Message_span.configure(text='''Gaussian span [S]''',font=("Helvetica", 10, "normal", "italic"))
        self.Message_span.configure(width=74)

        self.Message_sps = tk.Message(top)
        self.Message_sps.place(relx=0.059, rely=0.465, relheight=0.063, relwidth=0.138)
        self.Message_sps.configure(background='whitesmoke')
        self.Message_sps.configure(cursor="fleur")
        self.Message_sps.configure(foreground="#000000")
        self.Message_sps.configure(highlightbackground="#d9d9d9")
        self.Message_sps.configure(highlightcolor="black")
        self.Message_sps.configure(text='''Gaussian\nsps [Sa/S]''',font=("Helvetica", 10, "normal", "italic"))
        self.Message_sps.configure(width=97)

        self.Message_BT = tk.Message(top)
        self.Message_BT.place(relx=0.07, rely=0.53, relheight=0.063, relwidth=0.138)
        self.Message_BT.configure(background='whitesmoke')
        self.Message_BT.configure(foreground="#000000")
        self.Message_BT.configure(highlightbackground="#d9d9d9")
        self.Message_BT.configure(highlightcolor="black")
        self.Message_BT.configure(text='''Gaussian BT''',font=("Helvetica", 10, "normal", "italic"))
        self.Message_BT.configure(width=80)

        self.Message_FsSDR = tk.Message(top)
        self.Message_FsSDR.place(relx=0.072, rely=0.595, relheight=0.063, relwidth=0.13)
        self.Message_FsSDR.configure(background='whitesmoke')
        self.Message_FsSDR.configure(cursor="fleur")
        self.Message_FsSDR.configure(foreground="#000000")
        self.Message_FsSDR.configure(highlightbackground="#d9d9d9")
        self.Message_FsSDR.configure(highlightcolor="black")
        self.Message_FsSDR.configure(text='''SDR sample rate [Sa/s]''',font=("Helvetica", 10, "normal", "italic"))
        self.Message_FsSDR.configure(width=80)

        self.Message_Rb = tk.Message(top)
        self.Message_Rb.place(relx=0.072, rely=0.143, relheight=0.05, relwidth=0.13)
        self.Message_Rb.configure(background='whitesmoke')
        self.Message_Rb.configure(foreground="#000000")
        self.Message_Rb.configure(highlightbackground="#d9d9d9")
        self.Message_Rb.configure(highlightcolor="black")
        self.Message_Rb.configure(text='''Bit rate [b/s]''',font=("Helvetica", 10, "normal", "italic"))
        self.Message_Rb.configure(width=80)

        self.Entry_Rb = tk.Entry(top)
        self.Entry_Rb.place(relx=0.27, rely=0.15,height=20, relwidth=0.145)
        self.Entry_Rb.configure(background="white")
        self.Entry_Rb.configure(disabledforeground="#a3a3a3")
        self.Entry_Rb.configure(font="TkFixedFont")
        self.Entry_Rb.configure(foreground="#000000")
        self.Entry_Rb.configure(insertbackground="black")
        self.Entry_Rb.insert(tk.END, int(10e3))                                     # Set entry default value

        self.Entry_M = tk.Entry(top)
        self.Entry_M.place(relx=0.27, rely=0.2,height=20, relwidth=0.145)
        self.Entry_M.configure(background="white")
        self.Entry_M.configure(disabledforeground="#a3a3a3")
        self.Entry_M.configure(font="TkFixedFont")
        self.Entry_M.configure(foreground="#000000")
        self.Entry_M.configure(insertbackground="black")
        self.Entry_M.insert(tk.END, 4)

        self.Entry_h = tk.Entry(top)
        self.Entry_h.place(relx=0.27, rely=0.25,height=20, relwidth=0.145)
        self.Entry_h.configure(background="white")
        self.Entry_h.configure(disabledforeground="#a3a3a3")
        self.Entry_h.configure(font="TkFixedFont")
        self.Entry_h.configure(foreground="#000000")
        self.Entry_h.configure(insertbackground="black")
        self.Entry_h.insert(tk.END, 1.1)

        self.Entry_Nbits = tk.Entry(top)
        self.Entry_Nbits.place(relx=0.27, rely=0.1, height=20, relwidth=0.145)
        self.Entry_Nbits.configure(background="white")
        self.Entry_Nbits.configure(disabledforeground="#a3a3a3")
        self.Entry_Nbits.configure(font="TkFixedFont")
        self.Entry_Nbits.configure(foreground="#000000")
        self.Entry_Nbits.configure(insertbackground="black")
        self.Entry_Nbits.insert(tk.END, 240)

        self.Entry_osf = tk.Entry(top)
        self.Entry_osf.place(relx=0.27, rely=0.325,height=20, relwidth=0.145)
        self.Entry_osf.configure(background="white")
        self.Entry_osf.configure(disabledforeground="#a3a3a3")
        self.Entry_osf.configure(font="TkFixedFont")
        self.Entry_osf.configure(foreground="#000000")
        self.Entry_osf.configure(insertbackground="black")
        self.Entry_osf.insert(tk.END, 24)

        self.Entry_span = tk.Entry(top)
        self.Entry_span.place(relx=0.27, rely=0.4,height=20, relwidth=0.145)
        self.Entry_span.configure(background="white")
        self.Entry_span.configure(disabledforeground="#a3a3a3")
        self.Entry_span.configure(font="TkFixedFont")
        self.Entry_span.configure(foreground="#000000")
        self.Entry_span.configure(insertbackground="black")
        self.Entry_span.insert(tk.END, 8)

        self.Entry_sps = tk.Entry(top)
        self.Entry_sps.place(relx=0.27, rely=0.475,height=20, relwidth=0.145)
        self.Entry_sps.configure(background="white")
        self.Entry_sps.configure(disabledforeground="#a3a3a3")
        self.Entry_sps.configure(font="TkFixedFont")
        self.Entry_sps.configure(foreground="#000000")
        self.Entry_sps.configure(insertbackground="black")
        self.Entry_sps.insert(tk.END, 8)

        self.Entry_BT = tk.Entry(top)
        self.Entry_BT.place(relx=0.27, rely=0.545,height=20, relwidth=0.145)
        self.Entry_BT.configure(background="white")
        self.Entry_BT.configure(disabledforeground="#a3a3a3")
        self.Entry_BT.configure(font="TkFixedFont")
        self.Entry_BT.configure(foreground="#000000")
        self.Entry_BT.configure(insertbackground="black")
        self.Entry_BT.insert(tk.END, 0.5)

        self.Entry_FsSdr = tk.Entry(top)
        self.Entry_FsSdr.place(relx=0.27, rely=0.61, height=20, relwidth=0.145)
        self.Entry_FsSdr.configure(background="white")
        self.Entry_FsSdr.configure(disabledforeground="#a3a3a3")
        self.Entry_FsSdr.configure(font="TkFixedFont")
        self.Entry_FsSdr.configure(foreground="#000000")
        self.Entry_FsSdr.configure(insertbackground="black")
        self.Entry_FsSdr.insert(tk.END, int(250e3))

        scroll = tk.Scrollbar(root)                                                 # set scrollbar for textbox
        scroll.pack(side=tk.RIGHT, fill=tk.Y)
        self.Text1 = tk.Text(top,wrap=tk.NONE, yscrollcommand=scroll.set)
        self.Text1.place(relx=0.56, rely=0.36, relheight=0.52, relwidth=0.34)
        self.Text1.configure(background="white")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(foreground="black")
        self.Text1.configure(highlightbackground='white')
        self.Text1.configure(highlightcolor="black")
        self.Text1.configure(insertbackground="black")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(selectforeground="black")
        self.Text1.configure(wrap="word")
        self.Text1.configure(state='disabled')
        scroll.config(command=self.Text1.yview)


if __name__ == '__main__':
    vp_start_gui()
