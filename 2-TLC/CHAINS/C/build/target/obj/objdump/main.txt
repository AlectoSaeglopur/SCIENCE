
build\target\obj\main.o:     file format pe-i386


Disassembly of section .text:

00000000 <_main>:
 * @brief <i> Function for running main loop. </i>
 * 
 * @return error ID
 */
int main( void )
{
   0:	55                   	push   %ebp
   1:	89 e5                	mov    %esp,%ebp
   3:	83 e4 f0             	and    $0xfffffff0,%esp
   6:	81 ec f0 00 00 00    	sub    $0xf0,%esp
   c:	e8 00 00 00 00       	call   11 <_main+0x11>
  // 1. INITIALIZATION
  Debug_SetTerminalAppearance(COLOR_DEFAULT,STYLE_DEFAULT);
  11:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
  18:	00 
  19:	c7 04 24 61 00 00 00 	movl   $0x61,(%esp)
  20:	e8 00 00 00 00       	call   25 <_main+0x25>
  printf("\n >> Starting execution...\n");
  25:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  2c:	e8 00 00 00 00       	call   31 <_main+0x31>
  elapsedTime = clock();                                                        /** - get initial execution time */
  31:	e8 00 00 00 00       	call   36 <_main+0x36>
  36:	a3 b4 00 00 00       	mov    %eax,0xb4

  LIST_OF_STREAMS(DEF_STREAM_DECLARE);                                          /** - declare all streams */
  3b:	c7 84 24 e4 00 00 00 	movl   $0x0,0xe4(%esp)
  42:	00 00 00 00 
  46:	c7 84 24 e8 00 00 00 	movl   $0x0,0xe8(%esp)
  4d:	00 00 00 00 
  51:	c7 84 24 ec 00 00 00 	movl   $0x0,0xec(%esp)
  58:	00 00 00 00 
  5c:	c7 84 24 d8 00 00 00 	movl   $0x0,0xd8(%esp)
  63:	00 00 00 00 
  67:	c7 84 24 dc 00 00 00 	movl   $0x0,0xdc(%esp)
  6e:	00 00 00 00 
  72:	c7 84 24 e0 00 00 00 	movl   $0x0,0xe0(%esp)
  79:	00 00 00 00 
  7d:	c7 84 24 cc 00 00 00 	movl   $0x0,0xcc(%esp)
  84:	00 00 00 00 
  88:	c7 84 24 d0 00 00 00 	movl   $0x0,0xd0(%esp)
  8f:	00 00 00 00 
  93:	c7 84 24 d4 00 00 00 	movl   $0x0,0xd4(%esp)
  9a:	00 00 00 00 
  9e:	c7 84 24 c0 00 00 00 	movl   $0x0,0xc0(%esp)
  a5:	00 00 00 00 
  a9:	c7 84 24 c4 00 00 00 	movl   $0x0,0xc4(%esp)
  b0:	00 00 00 00 
  b4:	c7 84 24 c8 00 00 00 	movl   $0x0,0xc8(%esp)
  bb:	00 00 00 00 
  bf:	c7 84 24 b4 00 00 00 	movl   $0x0,0xb4(%esp)
  c6:	00 00 00 00 
  ca:	c7 84 24 b8 00 00 00 	movl   $0x0,0xb8(%esp)
  d1:	00 00 00 00 
  d5:	c7 84 24 bc 00 00 00 	movl   $0x0,0xbc(%esp)
  dc:	00 00 00 00 
  e0:	c7 84 24 a8 00 00 00 	movl   $0x0,0xa8(%esp)
  e7:	00 00 00 00 
  eb:	c7 84 24 ac 00 00 00 	movl   $0x0,0xac(%esp)
  f2:	00 00 00 00 
  f6:	c7 84 24 b0 00 00 00 	movl   $0x0,0xb0(%esp)
  fd:	00 00 00 00 
 101:	c7 84 24 9c 00 00 00 	movl   $0x0,0x9c(%esp)
 108:	00 00 00 00 
 10c:	c7 84 24 a0 00 00 00 	movl   $0x0,0xa0(%esp)
 113:	00 00 00 00 
 117:	c7 84 24 a4 00 00 00 	movl   $0x0,0xa4(%esp)
 11e:	00 00 00 00 
 122:	c7 84 24 90 00 00 00 	movl   $0x0,0x90(%esp)
 129:	00 00 00 00 
 12d:	c7 84 24 94 00 00 00 	movl   $0x0,0x94(%esp)
 134:	00 00 00 00 
 138:	c7 84 24 98 00 00 00 	movl   $0x0,0x98(%esp)
 13f:	00 00 00 00 
 143:	c7 84 24 84 00 00 00 	movl   $0x0,0x84(%esp)
 14a:	00 00 00 00 
 14e:	c7 84 24 88 00 00 00 	movl   $0x0,0x88(%esp)
 155:	00 00 00 00 
 159:	c7 84 24 8c 00 00 00 	movl   $0x0,0x8c(%esp)
 160:	00 00 00 00 
 164:	c7 44 24 78 00 00 00 	movl   $0x0,0x78(%esp)
 16b:	00 
 16c:	c7 44 24 7c 00 00 00 	movl   $0x0,0x7c(%esp)
 173:	00 
 174:	c7 84 24 80 00 00 00 	movl   $0x0,0x80(%esp)
 17b:	00 00 00 00 
 17f:	c7 44 24 6c 00 00 00 	movl   $0x0,0x6c(%esp)
 186:	00 
 187:	c7 44 24 70 00 00 00 	movl   $0x0,0x70(%esp)
 18e:	00 
 18f:	c7 44 24 74 00 00 00 	movl   $0x0,0x74(%esp)
 196:	00 
 197:	c7 44 24 60 00 00 00 	movl   $0x0,0x60(%esp)
 19e:	00 
 19f:	c7 44 24 64 00 00 00 	movl   $0x0,0x64(%esp)
 1a6:	00 
 1a7:	c7 44 24 68 00 00 00 	movl   $0x0,0x68(%esp)
 1ae:	00 
 1af:	c7 44 24 54 00 00 00 	movl   $0x0,0x54(%esp)
 1b6:	00 
 1b7:	c7 44 24 58 00 00 00 	movl   $0x0,0x58(%esp)
 1be:	00 
 1bf:	c7 44 24 5c 02 00 00 	movl   $0x2,0x5c(%esp)
 1c6:	00 
 1c7:	c7 44 24 48 00 00 00 	movl   $0x0,0x48(%esp)
 1ce:	00 
 1cf:	c7 44 24 4c 00 00 00 	movl   $0x0,0x4c(%esp)
 1d6:	00 
 1d7:	c7 44 24 50 02 00 00 	movl   $0x2,0x50(%esp)
 1de:	00 
 1df:	c7 44 24 3c 00 00 00 	movl   $0x0,0x3c(%esp)
 1e6:	00 
 1e7:	c7 44 24 40 00 00 00 	movl   $0x0,0x40(%esp)
 1ee:	00 
 1ef:	c7 44 24 44 01 00 00 	movl   $0x1,0x44(%esp)
 1f6:	00 
  LIST_OF_STREAMS(DEF_STREAM_ALLOCATE);                                         /** - allocate memory for all streams */
 1f7:	8b 84 24 ec 00 00 00 	mov    0xec(%esp),%eax
 1fe:	89 44 24 08          	mov    %eax,0x8(%esp)
 202:	c7 44 24 04 78 01 00 	movl   $0x178,0x4(%esp)
 209:	00 
 20a:	8d 84 24 e4 00 00 00 	lea    0xe4(%esp),%eax
 211:	89 04 24             	mov    %eax,(%esp)
 214:	e8 00 00 00 00       	call   219 <_main+0x219>
 219:	8b 84 24 e0 00 00 00 	mov    0xe0(%esp),%eax
 220:	89 44 24 08          	mov    %eax,0x8(%esp)
 224:	c7 44 24 04 78 01 00 	movl   $0x178,0x4(%esp)
 22b:	00 
 22c:	8d 84 24 d8 00 00 00 	lea    0xd8(%esp),%eax
 233:	89 04 24             	mov    %eax,(%esp)
 236:	e8 00 00 00 00       	call   23b <_main+0x23b>
 23b:	8b 84 24 d4 00 00 00 	mov    0xd4(%esp),%eax
 242:	89 44 24 08          	mov    %eax,0x8(%esp)
 246:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
 24d:	00 
 24e:	8d 84 24 cc 00 00 00 	lea    0xcc(%esp),%eax
 255:	89 04 24             	mov    %eax,(%esp)
 258:	e8 00 00 00 00       	call   25d <_main+0x25d>
 25d:	8b 84 24 c8 00 00 00 	mov    0xc8(%esp),%eax
 264:	89 44 24 08          	mov    %eax,0x8(%esp)
 268:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
 26f:	00 
 270:	8d 84 24 c0 00 00 00 	lea    0xc0(%esp),%eax
 277:	89 04 24             	mov    %eax,(%esp)
 27a:	e8 00 00 00 00       	call   27f <_main+0x27f>
 27f:	8b 84 24 bc 00 00 00 	mov    0xbc(%esp),%eax
 286:	89 44 24 08          	mov    %eax,0x8(%esp)
 28a:	c7 44 24 04 78 01 00 	movl   $0x178,0x4(%esp)
 291:	00 
 292:	8d 84 24 b4 00 00 00 	lea    0xb4(%esp),%eax
 299:	89 04 24             	mov    %eax,(%esp)
 29c:	e8 00 00 00 00       	call   2a1 <_main+0x2a1>
 2a1:	8b 84 24 b0 00 00 00 	mov    0xb0(%esp),%eax
 2a8:	89 44 24 08          	mov    %eax,0x8(%esp)
 2ac:	c7 44 24 04 78 01 00 	movl   $0x178,0x4(%esp)
 2b3:	00 
 2b4:	8d 84 24 a8 00 00 00 	lea    0xa8(%esp),%eax
 2bb:	89 04 24             	mov    %eax,(%esp)
 2be:	e8 00 00 00 00       	call   2c3 <_main+0x2c3>
 2c3:	8b 84 24 a4 00 00 00 	mov    0xa4(%esp),%eax
 2ca:	89 44 24 08          	mov    %eax,0x8(%esp)
 2ce:	c7 44 24 04 98 01 00 	movl   $0x198,0x4(%esp)
 2d5:	00 
 2d6:	8d 84 24 9c 00 00 00 	lea    0x9c(%esp),%eax
 2dd:	89 04 24             	mov    %eax,(%esp)
 2e0:	e8 00 00 00 00       	call   2e5 <_main+0x2e5>
 2e5:	8b 84 24 98 00 00 00 	mov    0x98(%esp),%eax
 2ec:	89 44 24 08          	mov    %eax,0x8(%esp)
 2f0:	c7 44 24 04 98 01 00 	movl   $0x198,0x4(%esp)
 2f7:	00 
 2f8:	8d 84 24 90 00 00 00 	lea    0x90(%esp),%eax
 2ff:	89 04 24             	mov    %eax,(%esp)
 302:	e8 00 00 00 00       	call   307 <_main+0x307>
 307:	8b 84 24 8c 00 00 00 	mov    0x8c(%esp),%eax
 30e:	89 44 24 08          	mov    %eax,0x8(%esp)
 312:	c7 44 24 04 98 01 00 	movl   $0x198,0x4(%esp)
 319:	00 
 31a:	8d 84 24 84 00 00 00 	lea    0x84(%esp),%eax
 321:	89 04 24             	mov    %eax,(%esp)
 324:	e8 00 00 00 00       	call   329 <_main+0x329>
 329:	8b 84 24 80 00 00 00 	mov    0x80(%esp),%eax
 330:	89 44 24 08          	mov    %eax,0x8(%esp)
 334:	c7 44 24 04 98 01 00 	movl   $0x198,0x4(%esp)
 33b:	00 
 33c:	8d 44 24 78          	lea    0x78(%esp),%eax
 340:	89 04 24             	mov    %eax,(%esp)
 343:	e8 00 00 00 00       	call   348 <_main+0x348>
 348:	8b 44 24 74          	mov    0x74(%esp),%eax
 34c:	89 44 24 08          	mov    %eax,0x8(%esp)
 350:	c7 44 24 04 30 03 00 	movl   $0x330,0x4(%esp)
 357:	00 
 358:	8d 44 24 6c          	lea    0x6c(%esp),%eax
 35c:	89 04 24             	mov    %eax,(%esp)
 35f:	e8 00 00 00 00       	call   364 <_main+0x364>
 364:	8b 44 24 68          	mov    0x68(%esp),%eax
 368:	89 44 24 08          	mov    %eax,0x8(%esp)
 36c:	c7 44 24 04 30 03 00 	movl   $0x330,0x4(%esp)
 373:	00 
 374:	8d 44 24 60          	lea    0x60(%esp),%eax
 378:	89 04 24             	mov    %eax,(%esp)
 37b:	e8 00 00 00 00       	call   380 <_main+0x380>
 380:	8b 44 24 5c          	mov    0x5c(%esp),%eax
 384:	89 44 24 08          	mov    %eax,0x8(%esp)
 388:	c7 44 24 04 c0 0c 00 	movl   $0xcc0,0x4(%esp)
 38f:	00 
 390:	8d 44 24 54          	lea    0x54(%esp),%eax
 394:	89 04 24             	mov    %eax,(%esp)
 397:	e8 00 00 00 00       	call   39c <_main+0x39c>
 39c:	8b 44 24 50          	mov    0x50(%esp),%eax
 3a0:	89 44 24 08          	mov    %eax,0x8(%esp)
 3a4:	c7 44 24 04 c0 0c 00 	movl   $0xcc0,0x4(%esp)
 3ab:	00 
 3ac:	8d 44 24 48          	lea    0x48(%esp),%eax
 3b0:	89 04 24             	mov    %eax,(%esp)
 3b3:	e8 00 00 00 00       	call   3b8 <_main+0x3b8>
 3b8:	8b 44 24 44          	mov    0x44(%esp),%eax
 3bc:	89 44 24 08          	mov    %eax,0x8(%esp)
 3c0:	c7 44 24 04 80 19 00 	movl   $0x1980,0x4(%esp)
 3c7:	00 
 3c8:	8d 44 24 3c          	lea    0x3c(%esp),%eax
 3cc:	89 04 24             	mov    %eax,(%esp)
 3cf:	e8 00 00 00 00       	call   3d4 <_main+0x3d4>
  LIST_OF_PARAMETERS(DEF_PARAMETER_INITIALIZE);                                 /** - initialize all parameter structures */
 3d4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 3db:	e8 00 00 00 00       	call   3e0 <_main+0x3e0>
 3e0:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
 3e7:	e8 00 00 00 00       	call   3ec <_main+0x3ec>
 3ec:	c7 04 24 1c 00 00 00 	movl   $0x1c,(%esp)
 3f3:	e8 00 00 00 00       	call   3f8 <_main+0x3f8>
 3f8:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
 3ff:	e8 00 00 00 00       	call   404 <_main+0x404>
 404:	c7 04 24 34 00 00 00 	movl   $0x34,(%esp)
 40b:	e8 00 00 00 00       	call   410 <_main+0x410>
 410:	c7 04 24 44 00 00 00 	movl   $0x44,(%esp)
 417:	e8 00 00 00 00       	call   41c <_main+0x41c>
 41c:	c7 04 24 50 00 00 00 	movl   $0x50,(%esp)
 423:	e8 00 00 00 00       	call   428 <_main+0x428>
  Debug_ListParameters(&dgbParam,&scrParam,&rsParam,&itlvParam,
 428:	c7 44 24 18 50 00 00 	movl   $0x50,0x18(%esp)
 42f:	00 
 430:	c7 44 24 14 44 00 00 	movl   $0x44,0x14(%esp)
 437:	00 
 438:	c7 44 24 10 34 00 00 	movl   $0x34,0x10(%esp)
 43f:	00 
 440:	c7 44 24 0c 2c 00 00 	movl   $0x2c,0xc(%esp)
 447:	00 
 448:	c7 44 24 08 1c 00 00 	movl   $0x1c,0x8(%esp)
 44f:	00 
 450:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
 457:	00 
 458:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
 45f:	e8 00 00 00 00       	call   464 <_main+0x464>
    &ccParam,&modParam,&chanParam);                                             /** - list debug parameters */
  Debug_PrintParameters(LEN_ORG_BY,&dgbParam);                                  /** - verify validity of origin stream length */
 464:	c7 44 24 04 60 00 00 	movl   $0x60,0x4(%esp)
 46b:	00 
 46c:	c7 04 24 78 01 00 00 	movl   $0x178,(%esp)
 473:	e8 00 00 00 00       	call   478 <_main+0x478>

  // 2. PROCESSING
  Debug_GenerateRandomBytes(&txOrgStream,NULL);                                 /** - fill tx origin buffer with random bytes */
 478:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 47f:	00 
 480:	8d 84 24 e4 00 00 00 	lea    0xe4(%esp),%eax
 487:	89 04 24             	mov    %eax,(%esp)
 48a:	e8 00 00 00 00       	call   48f <_main+0x48f>
  Crc_CalculateChecksum(&txOrgStream,&txCrcStream,&crcParam);                   /** - calculate tx crc */
 48f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 496:	00 
 497:	8d 84 24 cc 00 00 00 	lea    0xcc(%esp),%eax
 49e:	89 44 24 04          	mov    %eax,0x4(%esp)
 4a2:	8d 84 24 e4 00 00 00 	lea    0xe4(%esp),%eax
 4a9:	89 04 24             	mov    %eax,(%esp)
 4ac:	e8 00 00 00 00       	call   4b1 <_main+0x4b1>
  Scramb_Scrambler(&txOrgStream,&txScrStream,&scrParam);                        /** - scrambler */
 4b1:	c7 44 24 08 0c 00 00 	movl   $0xc,0x8(%esp)
 4b8:	00 
 4b9:	8d 84 24 b4 00 00 00 	lea    0xb4(%esp),%eax
 4c0:	89 44 24 04          	mov    %eax,0x4(%esp)
 4c4:	8d 84 24 e4 00 00 00 	lea    0xe4(%esp),%eax
 4cb:	89 04 24             	mov    %eax,(%esp)
 4ce:	e8 00 00 00 00       	call   4d3 <_main+0x4d3>
  RcCod_Encoder(&txScrStream,&txRsStream,&rsParam);                             /** - reed-solomon encoder */
 4d3:	c7 44 24 08 1c 00 00 	movl   $0x1c,0x8(%esp)
 4da:	00 
 4db:	8d 84 24 9c 00 00 00 	lea    0x9c(%esp),%eax
 4e2:	89 44 24 04          	mov    %eax,0x4(%esp)
 4e6:	8d 84 24 b4 00 00 00 	lea    0xb4(%esp),%eax
 4ed:	89 04 24             	mov    %eax,(%esp)
 4f0:	e8 00 00 00 00       	call   4f5 <_main+0x4f5>
  Intrlv_Interleaver(&txRsStream,&txItlvStream,&itlvParam);                     /** - interleaver */
 4f5:	c7 44 24 08 2c 00 00 	movl   $0x2c,0x8(%esp)
 4fc:	00 
 4fd:	8d 84 24 84 00 00 00 	lea    0x84(%esp),%eax
 504:	89 44 24 04          	mov    %eax,0x4(%esp)
 508:	8d 84 24 9c 00 00 00 	lea    0x9c(%esp),%eax
 50f:	89 04 24             	mov    %eax,(%esp)
 512:	e8 00 00 00 00       	call   517 <_main+0x517>
  CnvCod_Encoder(&txItlvStream,&txCcStream,&ccParam);                           /** - convolutional encoder */
 517:	c7 44 24 08 34 00 00 	movl   $0x34,0x8(%esp)
 51e:	00 
 51f:	8d 44 24 6c          	lea    0x6c(%esp),%eax
 523:	89 44 24 04          	mov    %eax,0x4(%esp)
 527:	8d 84 24 84 00 00 00 	lea    0x84(%esp),%eax
 52e:	89 04 24             	mov    %eax,(%esp)
 531:	e8 00 00 00 00       	call   536 <_main+0x536>
  if (CHAN_BSC == chanParam.type)
 536:	a1 54 00 00 00       	mov    0x54,%eax
 53b:	85 c0                	test   %eax,%eax
 53d:	75 3d                	jne    57c <_main+0x57c>
  {
    Channel_BSC(&txCcStream,&rxCcStream,&chanParam);                            /** - apply bsc channel corruption */
 53f:	c7 44 24 08 50 00 00 	movl   $0x50,0x8(%esp)
 546:	00 
 547:	8d 44 24 60          	lea    0x60(%esp),%eax
 54b:	89 44 24 04          	mov    %eax,0x4(%esp)
 54f:	8d 44 24 6c          	lea    0x6c(%esp),%eax
 553:	89 04 24             	mov    %eax,(%esp)
 556:	e8 00 00 00 00       	call   55b <_main+0x55b>
    CnvCod_HardDecoder(&rxCcStream,&rxItlvStream,&ccParam);                     /** - convolutional hard-decoder */
 55b:	c7 44 24 08 34 00 00 	movl   $0x34,0x8(%esp)
 562:	00 
 563:	8d 44 24 78          	lea    0x78(%esp),%eax
 567:	89 44 24 04          	mov    %eax,0x4(%esp)
 56b:	8d 44 24 60          	lea    0x60(%esp),%eax
 56f:	89 04 24             	mov    %eax,(%esp)
 572:	e8 00 00 00 00       	call   577 <_main+0x577>
 577:	e9 cb 00 00 00       	jmp    647 <_main+0x647>
  }
  else if (CHAN_AWGN == chanParam.type)
 57c:	a1 54 00 00 00       	mov    0x54,%eax
 581:	83 f8 01             	cmp    $0x1,%eax
 584:	0f 85 bd 00 00 00    	jne    647 <_main+0x647>
  {
    Modulation_Mapper(&txCcStream,&txModStream,&modParam);                      /** - modulation mapper */
 58a:	c7 44 24 08 44 00 00 	movl   $0x44,0x8(%esp)
 591:	00 
 592:	8d 44 24 54          	lea    0x54(%esp),%eax
 596:	89 44 24 04          	mov    %eax,0x4(%esp)
 59a:	8d 44 24 6c          	lea    0x6c(%esp),%eax
 59e:	89 04 24             	mov    %eax,(%esp)
 5a1:	e8 00 00 00 00       	call   5a6 <_main+0x5a6>
    Channel_AWGN(&txModStream,&rxModStream,&chanParam);                         /** - apply awgn channel corruption */
 5a6:	c7 44 24 08 50 00 00 	movl   $0x50,0x8(%esp)
 5ad:	00 
 5ae:	8d 44 24 48          	lea    0x48(%esp),%eax
 5b2:	89 44 24 04          	mov    %eax,0x4(%esp)
 5b6:	8d 44 24 54          	lea    0x54(%esp),%eax
 5ba:	89 04 24             	mov    %eax,(%esp)
 5bd:	e8 00 00 00 00       	call   5c2 <_main+0x5c2>
    if (CC_VITDM_HARD == ccParam.vitDM)
 5c2:	a1 40 00 00 00       	mov    0x40,%eax
 5c7:	85 c0                	test   %eax,%eax
 5c9:	75 3a                	jne    605 <_main+0x605>
    {
      Modulation_HardDemapper(&rxModStream,&rxCcStream,&modParam);              /** - modulation hard-demapper */
 5cb:	c7 44 24 08 44 00 00 	movl   $0x44,0x8(%esp)
 5d2:	00 
 5d3:	8d 44 24 60          	lea    0x60(%esp),%eax
 5d7:	89 44 24 04          	mov    %eax,0x4(%esp)
 5db:	8d 44 24 48          	lea    0x48(%esp),%eax
 5df:	89 04 24             	mov    %eax,(%esp)
 5e2:	e8 00 00 00 00       	call   5e7 <_main+0x5e7>
      CnvCod_HardDecoder(&rxCcStream,&rxItlvStream,&ccParam);                   /** - convolutional hard-decoder */
 5e7:	c7 44 24 08 34 00 00 	movl   $0x34,0x8(%esp)
 5ee:	00 
 5ef:	8d 44 24 78          	lea    0x78(%esp),%eax
 5f3:	89 44 24 04          	mov    %eax,0x4(%esp)
 5f7:	8d 44 24 60          	lea    0x60(%esp),%eax
 5fb:	89 04 24             	mov    %eax,(%esp)
 5fe:	e8 00 00 00 00       	call   603 <_main+0x603>
 603:	eb 42                	jmp    647 <_main+0x647>
    }
    else if (CC_VITDM_SOFT == ccParam.vitDM)
 605:	a1 40 00 00 00       	mov    0x40,%eax
 60a:	83 f8 01             	cmp    $0x1,%eax
 60d:	75 38                	jne    647 <_main+0x647>
    {
      Modulation_SoftDemapper(&rxModStream,&rxLLRStream,&modParam);             /** - modulation soft-demapper */
 60f:	c7 44 24 08 44 00 00 	movl   $0x44,0x8(%esp)
 616:	00 
 617:	8d 44 24 3c          	lea    0x3c(%esp),%eax
 61b:	89 44 24 04          	mov    %eax,0x4(%esp)
 61f:	8d 44 24 48          	lea    0x48(%esp),%eax
 623:	89 04 24             	mov    %eax,(%esp)
 626:	e8 00 00 00 00       	call   62b <_main+0x62b>
      CnvCod_SoftDecoder(&rxLLRStream,&rxItlvStream,&ccParam);                  /** - convolutional soft-decoder */
 62b:	c7 44 24 08 34 00 00 	movl   $0x34,0x8(%esp)
 632:	00 
 633:	8d 44 24 78          	lea    0x78(%esp),%eax
 637:	89 44 24 04          	mov    %eax,0x4(%esp)
 63b:	8d 44 24 3c          	lea    0x3c(%esp),%eax
 63f:	89 04 24             	mov    %eax,(%esp)
 642:	e8 00 00 00 00       	call   647 <_main+0x647>
    }
  }
  Intrlv_Deinterleaver(&rxItlvStream,&rxRsStream,&itlvParam);                   /** - deinterleaver */
 647:	c7 44 24 08 2c 00 00 	movl   $0x2c,0x8(%esp)
 64e:	00 
 64f:	8d 84 24 90 00 00 00 	lea    0x90(%esp),%eax
 656:	89 44 24 04          	mov    %eax,0x4(%esp)
 65a:	8d 44 24 78          	lea    0x78(%esp),%eax
 65e:	89 04 24             	mov    %eax,(%esp)
 661:	e8 00 00 00 00       	call   666 <_main+0x666>
  RcCod_Decoder(&rxRsStream,&rxScrStream,&rsParam);                             /** - reed-solomon decoder */
 666:	c7 44 24 08 1c 00 00 	movl   $0x1c,0x8(%esp)
 66d:	00 
 66e:	8d 84 24 a8 00 00 00 	lea    0xa8(%esp),%eax
 675:	89 44 24 04          	mov    %eax,0x4(%esp)
 679:	8d 84 24 90 00 00 00 	lea    0x90(%esp),%eax
 680:	89 04 24             	mov    %eax,(%esp)
 683:	e8 00 00 00 00       	call   688 <_main+0x688>
  Scramb_Descrambler(&rxScrStream,&rxOrgStream,&scrParam);                      /** - descrambler */
 688:	c7 44 24 08 0c 00 00 	movl   $0xc,0x8(%esp)
 68f:	00 
 690:	8d 84 24 d8 00 00 00 	lea    0xd8(%esp),%eax
 697:	89 44 24 04          	mov    %eax,0x4(%esp)
 69b:	8d 84 24 a8 00 00 00 	lea    0xa8(%esp),%eax
 6a2:	89 04 24             	mov    %eax,(%esp)
 6a5:	e8 00 00 00 00       	call   6aa <_main+0x6aa>
  Crc_CalculateChecksum(&rxOrgStream,&rxCrcStream,&crcParam);                   /** - calculate rx crc */
 6aa:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 6b1:	00 
 6b2:	8d 84 24 c0 00 00 00 	lea    0xc0(%esp),%eax
 6b9:	89 44 24 04          	mov    %eax,0x4(%esp)
 6bd:	8d 84 24 d8 00 00 00 	lea    0xd8(%esp),%eax
 6c4:	89 04 24             	mov    %eax,(%esp)
 6c7:	e8 00 00 00 00       	call   6cc <_main+0x6cc>
  Debug_PrintByteStream(&rxRsStream,PID_RX_RSCOD,&dgbParam);                    /** - print rx reed-solomon coded stream content */
  Debug_PrintByteStream(&rxScrStream,PID_RX_SCR,&dgbParam);                     /** - print rx scrambled stream content */
  Debug_PrintByteStream(&rxOrgStream,PID_RX_ORG,&dgbParam);                     /** - print rx origin stream content */
  Debug_PrintByteStream(&rxCrcStream,PID_RX_CRC,&dgbParam);                     /** - print rx crc stream content */
#endif
  Debug_CheckWrongBits(&txCcStream,&rxCcStream,PID_RX_CNVCOD,&dgbParam,NULL);   /** - check number of corrupted bits at convolutional coding level */
 6cc:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 6d3:	00 
 6d4:	c7 44 24 0c 60 00 00 	movl   $0x60,0xc(%esp)
 6db:	00 
 6dc:	c7 44 24 08 0b 00 00 	movl   $0xb,0x8(%esp)
 6e3:	00 
 6e4:	8d 44 24 60          	lea    0x60(%esp),%eax
 6e8:	89 44 24 04          	mov    %eax,0x4(%esp)
 6ec:	8d 44 24 6c          	lea    0x6c(%esp),%eax
 6f0:	89 04 24             	mov    %eax,(%esp)
 6f3:	e8 00 00 00 00       	call   6f8 <_main+0x6f8>
  Debug_CheckWrongBits(&txRsStream,&rxRsStream,PID_RX_RSCOD,&dgbParam,NULL);    /** - check number of corrupted bits at convolutional coding level */
 6f8:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 6ff:	00 
 700:	c7 44 24 0c 60 00 00 	movl   $0x60,0xc(%esp)
 707:	00 
 708:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
 70f:	00 
 710:	8d 84 24 90 00 00 00 	lea    0x90(%esp),%eax
 717:	89 44 24 04          	mov    %eax,0x4(%esp)
 71b:	8d 84 24 9c 00 00 00 	lea    0x9c(%esp),%eax
 722:	89 04 24             	mov    %eax,(%esp)
 725:	e8 00 00 00 00       	call   72a <_main+0x72a>
  Debug_CheckWrongBits(&txOrgStream,&rxOrgStream,PID_RX_ORG,&dgbParam,NULL);    /** - check number of corrupted bits at origin level */
 72a:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 731:	00 
 732:	c7 44 24 0c 60 00 00 	movl   $0x60,0xc(%esp)
 739:	00 
 73a:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
 741:	00 
 742:	8d 84 24 d8 00 00 00 	lea    0xd8(%esp),%eax
 749:	89 44 24 04          	mov    %eax,0x4(%esp)
 74d:	8d 84 24 e4 00 00 00 	lea    0xe4(%esp),%eax
 754:	89 04 24             	mov    %eax,(%esp)
 757:	e8 00 00 00 00       	call   75c <_main+0x75c>
  Debug_CheckWrongBits(&txCrcStream,&rxCrcStream,PID_RX_CRC,&dgbParam,NULL);    /** - check crc correctness */
 75c:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 763:	00 
 764:	c7 44 24 0c 60 00 00 	movl   $0x60,0xc(%esp)
 76b:	00 
 76c:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
 773:	00 
 774:	8d 84 24 c0 00 00 00 	lea    0xc0(%esp),%eax
 77b:	89 44 24 04          	mov    %eax,0x4(%esp)
 77f:	8d 84 24 cc 00 00 00 	lea    0xcc(%esp),%eax
 786:	89 04 24             	mov    %eax,(%esp)
 789:	e8 00 00 00 00       	call   78e <_main+0x78e>
  Debug_WriteByteStreamToCsv(&txOrgStream,PID_TX_ORG);                          /** - write tx source buffer content into csv file */
  Debug_WriteComplexStreamToCsv(&txModStream,PID_TX_MAP);
#endif

  // 4. FINALIZATION
  LIST_OF_STREAMS(DEF_STREAM_FREE);                                             /** - free memory for all streams */
 78e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 795:	00 
 796:	8d 84 24 e4 00 00 00 	lea    0xe4(%esp),%eax
 79d:	89 04 24             	mov    %eax,(%esp)
 7a0:	e8 00 00 00 00       	call   7a5 <_main+0x7a5>
 7a5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 7ac:	00 
 7ad:	8d 84 24 d8 00 00 00 	lea    0xd8(%esp),%eax
 7b4:	89 04 24             	mov    %eax,(%esp)
 7b7:	e8 00 00 00 00       	call   7bc <_main+0x7bc>
 7bc:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 7c3:	00 
 7c4:	8d 84 24 cc 00 00 00 	lea    0xcc(%esp),%eax
 7cb:	89 04 24             	mov    %eax,(%esp)
 7ce:	e8 00 00 00 00       	call   7d3 <_main+0x7d3>
 7d3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 7da:	00 
 7db:	8d 84 24 c0 00 00 00 	lea    0xc0(%esp),%eax
 7e2:	89 04 24             	mov    %eax,(%esp)
 7e5:	e8 00 00 00 00       	call   7ea <_main+0x7ea>
 7ea:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 7f1:	00 
 7f2:	8d 84 24 b4 00 00 00 	lea    0xb4(%esp),%eax
 7f9:	89 04 24             	mov    %eax,(%esp)
 7fc:	e8 00 00 00 00       	call   801 <_main+0x801>
 801:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 808:	00 
 809:	8d 84 24 a8 00 00 00 	lea    0xa8(%esp),%eax
 810:	89 04 24             	mov    %eax,(%esp)
 813:	e8 00 00 00 00       	call   818 <_main+0x818>
 818:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 81f:	00 
 820:	8d 84 24 9c 00 00 00 	lea    0x9c(%esp),%eax
 827:	89 04 24             	mov    %eax,(%esp)
 82a:	e8 00 00 00 00       	call   82f <_main+0x82f>
 82f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 836:	00 
 837:	8d 84 24 90 00 00 00 	lea    0x90(%esp),%eax
 83e:	89 04 24             	mov    %eax,(%esp)
 841:	e8 00 00 00 00       	call   846 <_main+0x846>
 846:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 84d:	00 
 84e:	8d 84 24 84 00 00 00 	lea    0x84(%esp),%eax
 855:	89 04 24             	mov    %eax,(%esp)
 858:	e8 00 00 00 00       	call   85d <_main+0x85d>
 85d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 864:	00 
 865:	8d 44 24 78          	lea    0x78(%esp),%eax
 869:	89 04 24             	mov    %eax,(%esp)
 86c:	e8 00 00 00 00       	call   871 <_main+0x871>
 871:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 878:	00 
 879:	8d 44 24 6c          	lea    0x6c(%esp),%eax
 87d:	89 04 24             	mov    %eax,(%esp)
 880:	e8 00 00 00 00       	call   885 <_main+0x885>
 885:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
 88c:	00 
 88d:	8d 44 24 60          	lea    0x60(%esp),%eax
 891:	89 04 24             	mov    %eax,(%esp)
 894:	e8 00 00 00 00       	call   899 <_main+0x899>
 899:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
 8a0:	00 
 8a1:	8d 44 24 54          	lea    0x54(%esp),%eax
 8a5:	89 04 24             	mov    %eax,(%esp)
 8a8:	e8 00 00 00 00       	call   8ad <_main+0x8ad>
 8ad:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
 8b4:	00 
 8b5:	8d 44 24 48          	lea    0x48(%esp),%eax
 8b9:	89 04 24             	mov    %eax,(%esp)
 8bc:	e8 00 00 00 00       	call   8c1 <_main+0x8c1>
 8c1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
 8c8:	00 
 8c9:	8d 44 24 3c          	lea    0x3c(%esp),%eax
 8cd:	89 04 24             	mov    %eax,(%esp)
 8d0:	e8 00 00 00 00       	call   8d5 <_main+0x8d5>

  elapsedTime = clock()-elapsedTime;                                            /** - get final execution time and estimate overall execution time */
 8d5:	e8 00 00 00 00       	call   8da <_main+0x8da>
 8da:	89 c2                	mov    %eax,%edx
 8dc:	a1 b4 00 00 00       	mov    0xb4,%eax
 8e1:	29 c2                	sub    %eax,%edx
 8e3:	89 d0                	mov    %edx,%eax
 8e5:	a3 b4 00 00 00       	mov    %eax,0xb4
  printf("\n >> Execution completed successfully in %1.3f seconds!\n\n",
    ((float)elapsedTime)/CLOCKS_PER_SEC);
 8ea:	a1 b4 00 00 00       	mov    0xb4,%eax
 8ef:	89 44 24 2c          	mov    %eax,0x2c(%esp)
 8f3:	db 44 24 2c          	fildl  0x2c(%esp)
 8f7:	d9 05 58 00 00 00    	flds   0x58
 8fd:	de f9                	fdivrp %st,%st(1)
  printf("\n >> Execution completed successfully in %1.3f seconds!\n\n",
 8ff:	dd 5c 24 04          	fstpl  0x4(%esp)
 903:	c7 04 24 1c 00 00 00 	movl   $0x1c,(%esp)
 90a:	e8 00 00 00 00       	call   90f <_main+0x90f>
  Debug_ResetTerminalAppearance();
 90f:	e8 00 00 00 00       	call   914 <_main+0x914>

  return 0;
 914:	b8 00 00 00 00       	mov    $0x0,%eax
}
 919:	c9                   	leave  
 91a:	c3                   	ret    
 91b:	90                   	nop
