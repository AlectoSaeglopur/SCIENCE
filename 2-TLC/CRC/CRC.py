
"""
" Title: CYCLIC REDUNDANCY CHECK (CRC) CALCULATOR
" Author: Filippo Valmori
" Date: 12/11/2018
" Reference: [1] Wikipedia - https://en.wikipedia.org/wiki/Cyclic_redundancy_check		
"""


### NEEDED LIBRARIES ###

#import random                                              # Absolute import of the entire library (then recall function as random.randint)
from random import randint                                  # Relative import of the randint function only (it can be renamed by adding "... as XYZ")
#from random import *                                       # Relative import of all function from the library (then no need to use "random.")      



### PARAMETERS ###

CrcDeg = 16                                                 # CRC degree (i.e. the number of CRC bits)
MsgLen = 10                                                 # Message length (in bytes)



### CRC FUNCTIONS ###

"""
" Function for retrieving the generator polynomial (maximum degree is implied)
" as afunction of the chosen CrcDeg.
"""
def GetGenPoly( Deg ) :
    switcher = {
            8 : (0,2,4,6,7),                                # Generator polynomial for 8-bit CRC (ITU standard)
            16 : (0,5,12),                                  # Generator polynomial for 16-bit CRC (DVB-S2 standard)
            24 : (0,1,5,6,23),                              # Generator polynomial for 24-bit CRC (UMTS standard)
            32 : (0,1,2,4,5,7,8,10,11,12,16,22,23,26),      # Generator polynomial for 32-bit CRC (MPEG-2 standard)
            64 : (0,1,3,4)                                  # Generator polynomial for 64-bit CRC (ISO standard)
        }
    if (Deg != 8) and (Deg != 16) and (Deg != 24) and (Deg != 32) and (Deg != 64) :
        raise ValueError('Invalid CRC degree.')
    else :
        return switcher.get(Deg)


"""
" Function for calculating the CRC of the input byte stream in accordance
" with the selected generator polynomial.
"""
def CrcCalc( InBytes, GenPoly ) :
    InBits = Byte2BitConv(InBytes)
    InLen = len(InBits)
    PolyLen = InLen+CrcDeg
    TmpPoly = InBits+[0]*CrcDeg
    if InBits.count(1) > 0 :
        MaxDeg = PolyLen-TmpPoly.index(1)-1
        QuotDeg = MaxDeg-CrcDeg
        while QuotDeg >= 0 :
            TmpPoly[PolyLen-MaxDeg-1] = 0
            for j in range(len(GenPoly)) :
                RemIdx = PolyLen-QuotDeg-GenPoly[j]-1
                TmpPoly[RemIdx] = (TmpPoly[RemIdx]+1)%2
            MaxDeg = PolyLen-TmpPoly.index(1)-1
            QuotDeg = MaxDeg-CrcDeg
    return Bit2ByteConv(TmpPoly[InLen:])

   

"""
" Function for converting a byte stream into the corresponding bit stream
"""
def Byte2BitConv( InBytes ) :
    InLen = len(InBytes)
    OutLen = (InLen<<3)
    OutBits = [0]*OutLen
    for j in range(OutLen) :
        ByteIdx = (j>>3)
        BitIdx = 7-(j%8)
        if (InBytes[ByteIdx] >>BitIdx)%2 :
            OutBits[j] = 1
    return OutBits


"""
" Function for converting a bit stream into the corresponding byte stream
"""
def Bit2ByteConv( InBits ) :
    InLen = len(InBits)
    OutLen = (InLen>>3)
    OutBytes = [0]*OutLen
    for j in range(InLen) :
        if InBits[j] :
            ByteIdx = (j>>3)
            BitIdx = 7-(j%8)
            OutBytes[ByteIdx] += (1<<BitIdx)
    return OutBytes


def PrintDataFile( Buf ) :
    InLen = len(Buf)
    for j in range(InLen) :
        if ( (j % 20) == 0 ) :
            print('\n    [%4d] '%j,end='')
        print('%02X '%Buf[j],end='')



### MAIN FUNCTION ###

# SrcBytes = [randint(0,255) for j in range(MsgLen)]            # Estimate CRC of randomly generated byte stream
# print(SrcBytes)
# GenPoly = GetGenPoly(CrcDeg)
# CrcBytes = CrcCalc(SrcBytes,GenPoly)
# print(CrcBytes)

fid = open("ObdhBlinkFw.bin","rb")                              # Estimate CRC of loaded binary file
RdBytes = fid.read()
fid.close()
# print(len(RdBytes))
# PrintDataFile(RdBytes)
GenPoly = GetGenPoly(CrcDeg)
CrcBytes = CrcCalc(RdBytes,GenPoly)
print('[{}]'.format(' '.join(hex(x) for x in CrcBytes)))        # Print in hexadecimal format