# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_zVKN_swig', [dirname(__file__)])
        except ImportError:
            import _zVKN_swig
            return _zVKN_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_zVKN_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _zVKN_swig = swig_import_helper()
    del swig_import_helper
else:
    import _zVKN_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _zVKN_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _zVKN_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _zVKN_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _zVKN_swig.high_res_timer_epoch()
class flag_appender_c_mm(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(flag_pos, flag_val):
        """
        make(bool flag_pos, int flag_val) -> flag_appender_c_mm_sptr

        Return a shared_ptr to a new instance of zVKN::flag_appender_c_mm.

        To avoid accidental use of raw pointers, zVKN::flag_appender_c_mm's constructor is in a private implementation class. zVKN::flag_appender_c_mm::make is the public interface for creating new instances.

        Params: (flag_pos, flag_val)
        """
        return _zVKN_swig.flag_appender_c_mm_make(flag_pos, flag_val)

    make = staticmethod(make)
    __swig_destroy__ = _zVKN_swig.delete_flag_appender_c_mm
    __del__ = lambda self: None
flag_appender_c_mm_swigregister = _zVKN_swig.flag_appender_c_mm_swigregister
flag_appender_c_mm_swigregister(flag_appender_c_mm)

def flag_appender_c_mm_make(flag_pos, flag_val):
    """
    flag_appender_c_mm_make(bool flag_pos, int flag_val) -> flag_appender_c_mm_sptr

    Return a shared_ptr to a new instance of zVKN::flag_appender_c_mm.

    To avoid accidental use of raw pointers, zVKN::flag_appender_c_mm's constructor is in a private implementation class. zVKN::flag_appender_c_mm::make is the public interface for creating new instances.

    Params: (flag_pos, flag_val)
    """
    return _zVKN_swig.flag_appender_c_mm_make(flag_pos, flag_val)

class flag_appender_c_mm_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::zVKN::flag_appender_c_mm)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::zVKN::flag_appender_c_mm)> self) -> flag_appender_c_mm_sptr
        __init__(boost::shared_ptr<(gr::zVKN::flag_appender_c_mm)> self, flag_appender_c_mm p) -> flag_appender_c_mm_sptr
        """
        this = _zVKN_swig.new_flag_appender_c_mm_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(flag_appender_c_mm_sptr self) -> flag_appender_c_mm"""
        return _zVKN_swig.flag_appender_c_mm_sptr___deref__(self)

    __swig_destroy__ = _zVKN_swig.delete_flag_appender_c_mm_sptr
    __del__ = lambda self: None

    def make(self, flag_pos, flag_val):
        """
        make(flag_appender_c_mm_sptr self, bool flag_pos, int flag_val) -> flag_appender_c_mm_sptr

        Return a shared_ptr to a new instance of zVKN::flag_appender_c_mm.

        To avoid accidental use of raw pointers, zVKN::flag_appender_c_mm's constructor is in a private implementation class. zVKN::flag_appender_c_mm::make is the public interface for creating new instances.

        Params: (flag_pos, flag_val)
        """
        return _zVKN_swig.flag_appender_c_mm_sptr_make(self, flag_pos, flag_val)


    def history(self):
        """history(flag_appender_c_mm_sptr self) -> unsigned int"""
        return _zVKN_swig.flag_appender_c_mm_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(flag_appender_c_mm_sptr self, int which, int delay)
        declare_sample_delay(flag_appender_c_mm_sptr self, unsigned int delay)
        """
        return _zVKN_swig.flag_appender_c_mm_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(flag_appender_c_mm_sptr self, int which) -> unsigned int"""
        return _zVKN_swig.flag_appender_c_mm_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(flag_appender_c_mm_sptr self) -> int"""
        return _zVKN_swig.flag_appender_c_mm_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(flag_appender_c_mm_sptr self) -> double"""
        return _zVKN_swig.flag_appender_c_mm_sptr_relative_rate(self)


    def start(self):
        """start(flag_appender_c_mm_sptr self) -> bool"""
        return _zVKN_swig.flag_appender_c_mm_sptr_start(self)


    def stop(self):
        """stop(flag_appender_c_mm_sptr self) -> bool"""
        return _zVKN_swig.flag_appender_c_mm_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(flag_appender_c_mm_sptr self, unsigned int which_input) -> uint64_t"""
        return _zVKN_swig.flag_appender_c_mm_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(flag_appender_c_mm_sptr self, unsigned int which_output) -> uint64_t"""
        return _zVKN_swig.flag_appender_c_mm_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(flag_appender_c_mm_sptr self) -> int"""
        return _zVKN_swig.flag_appender_c_mm_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(flag_appender_c_mm_sptr self, int m)"""
        return _zVKN_swig.flag_appender_c_mm_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(flag_appender_c_mm_sptr self)"""
        return _zVKN_swig.flag_appender_c_mm_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(flag_appender_c_mm_sptr self) -> bool"""
        return _zVKN_swig.flag_appender_c_mm_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(flag_appender_c_mm_sptr self, int m)"""
        return _zVKN_swig.flag_appender_c_mm_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(flag_appender_c_mm_sptr self) -> int"""
        return _zVKN_swig.flag_appender_c_mm_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(flag_appender_c_mm_sptr self, int i) -> long"""
        return _zVKN_swig.flag_appender_c_mm_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(flag_appender_c_mm_sptr self, long max_output_buffer)
        set_max_output_buffer(flag_appender_c_mm_sptr self, int port, long max_output_buffer)
        """
        return _zVKN_swig.flag_appender_c_mm_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(flag_appender_c_mm_sptr self, int i) -> long"""
        return _zVKN_swig.flag_appender_c_mm_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(flag_appender_c_mm_sptr self, long min_output_buffer)
        set_min_output_buffer(flag_appender_c_mm_sptr self, int port, long min_output_buffer)
        """
        return _zVKN_swig.flag_appender_c_mm_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(flag_appender_c_mm_sptr self) -> float"""
        return _zVKN_swig.flag_appender_c_mm_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(flag_appender_c_mm_sptr self) -> float"""
        return _zVKN_swig.flag_appender_c_mm_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(flag_appender_c_mm_sptr self) -> float"""
        return _zVKN_swig.flag_appender_c_mm_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(flag_appender_c_mm_sptr self) -> float"""
        return _zVKN_swig.flag_appender_c_mm_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(flag_appender_c_mm_sptr self) -> float"""
        return _zVKN_swig.flag_appender_c_mm_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(flag_appender_c_mm_sptr self) -> float"""
        return _zVKN_swig.flag_appender_c_mm_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(flag_appender_c_mm_sptr self, int which) -> float
        pc_input_buffers_full(flag_appender_c_mm_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.flag_appender_c_mm_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(flag_appender_c_mm_sptr self, int which) -> float
        pc_input_buffers_full_avg(flag_appender_c_mm_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.flag_appender_c_mm_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(flag_appender_c_mm_sptr self, int which) -> float
        pc_input_buffers_full_var(flag_appender_c_mm_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.flag_appender_c_mm_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(flag_appender_c_mm_sptr self, int which) -> float
        pc_output_buffers_full(flag_appender_c_mm_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.flag_appender_c_mm_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(flag_appender_c_mm_sptr self, int which) -> float
        pc_output_buffers_full_avg(flag_appender_c_mm_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.flag_appender_c_mm_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(flag_appender_c_mm_sptr self, int which) -> float
        pc_output_buffers_full_var(flag_appender_c_mm_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.flag_appender_c_mm_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(flag_appender_c_mm_sptr self) -> float"""
        return _zVKN_swig.flag_appender_c_mm_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(flag_appender_c_mm_sptr self) -> float"""
        return _zVKN_swig.flag_appender_c_mm_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(flag_appender_c_mm_sptr self) -> float"""
        return _zVKN_swig.flag_appender_c_mm_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(flag_appender_c_mm_sptr self) -> float"""
        return _zVKN_swig.flag_appender_c_mm_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(flag_appender_c_mm_sptr self) -> float"""
        return _zVKN_swig.flag_appender_c_mm_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(flag_appender_c_mm_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _zVKN_swig.flag_appender_c_mm_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(flag_appender_c_mm_sptr self)"""
        return _zVKN_swig.flag_appender_c_mm_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(flag_appender_c_mm_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _zVKN_swig.flag_appender_c_mm_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(flag_appender_c_mm_sptr self) -> int"""
        return _zVKN_swig.flag_appender_c_mm_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(flag_appender_c_mm_sptr self) -> int"""
        return _zVKN_swig.flag_appender_c_mm_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(flag_appender_c_mm_sptr self, int priority) -> int"""
        return _zVKN_swig.flag_appender_c_mm_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(flag_appender_c_mm_sptr self) -> std::string"""
        return _zVKN_swig.flag_appender_c_mm_sptr_name(self)


    def symbol_name(self):
        """symbol_name(flag_appender_c_mm_sptr self) -> std::string"""
        return _zVKN_swig.flag_appender_c_mm_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(flag_appender_c_mm_sptr self) -> io_signature_sptr"""
        return _zVKN_swig.flag_appender_c_mm_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(flag_appender_c_mm_sptr self) -> io_signature_sptr"""
        return _zVKN_swig.flag_appender_c_mm_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(flag_appender_c_mm_sptr self) -> long"""
        return _zVKN_swig.flag_appender_c_mm_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(flag_appender_c_mm_sptr self) -> basic_block_sptr"""
        return _zVKN_swig.flag_appender_c_mm_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(flag_appender_c_mm_sptr self, int ninputs, int noutputs) -> bool"""
        return _zVKN_swig.flag_appender_c_mm_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(flag_appender_c_mm_sptr self) -> std::string"""
        return _zVKN_swig.flag_appender_c_mm_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(flag_appender_c_mm_sptr self, std::string name)"""
        return _zVKN_swig.flag_appender_c_mm_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(flag_appender_c_mm_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _zVKN_swig.flag_appender_c_mm_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(flag_appender_c_mm_sptr self) -> swig_int_ptr"""
        return _zVKN_swig.flag_appender_c_mm_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(flag_appender_c_mm_sptr self) -> swig_int_ptr"""
        return _zVKN_swig.flag_appender_c_mm_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(flag_appender_c_mm_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _zVKN_swig.flag_appender_c_mm_sptr_message_subscribers(self, which_port)

flag_appender_c_mm_sptr_swigregister = _zVKN_swig.flag_appender_c_mm_sptr_swigregister
flag_appender_c_mm_sptr_swigregister(flag_appender_c_mm_sptr)


flag_appender_c_mm_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
flag_appender_c_mm = flag_appender_c_mm.make;

class preamble_adder_c_bb(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(prb_val, prb_len):
        """
        make(int prb_val, int prb_len) -> preamble_adder_c_bb_sptr

        Return a shared_ptr to a new instance of zVKN::preamble_adder_c_bb.

        To avoid accidental use of raw pointers, zVKN::preamble_adder_c_bb's constructor is in a private implementation class. zVKN::preamble_adder_c_bb::make is the public interface for creating new instances.

        Params: (prb_val, prb_len)
        """
        return _zVKN_swig.preamble_adder_c_bb_make(prb_val, prb_len)

    make = staticmethod(make)
    __swig_destroy__ = _zVKN_swig.delete_preamble_adder_c_bb
    __del__ = lambda self: None
preamble_adder_c_bb_swigregister = _zVKN_swig.preamble_adder_c_bb_swigregister
preamble_adder_c_bb_swigregister(preamble_adder_c_bb)

def preamble_adder_c_bb_make(prb_val, prb_len):
    """
    preamble_adder_c_bb_make(int prb_val, int prb_len) -> preamble_adder_c_bb_sptr

    Return a shared_ptr to a new instance of zVKN::preamble_adder_c_bb.

    To avoid accidental use of raw pointers, zVKN::preamble_adder_c_bb's constructor is in a private implementation class. zVKN::preamble_adder_c_bb::make is the public interface for creating new instances.

    Params: (prb_val, prb_len)
    """
    return _zVKN_swig.preamble_adder_c_bb_make(prb_val, prb_len)

class preamble_adder_c_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::zVKN::preamble_adder_c_bb)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::zVKN::preamble_adder_c_bb)> self) -> preamble_adder_c_bb_sptr
        __init__(boost::shared_ptr<(gr::zVKN::preamble_adder_c_bb)> self, preamble_adder_c_bb p) -> preamble_adder_c_bb_sptr
        """
        this = _zVKN_swig.new_preamble_adder_c_bb_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(preamble_adder_c_bb_sptr self) -> preamble_adder_c_bb"""
        return _zVKN_swig.preamble_adder_c_bb_sptr___deref__(self)

    __swig_destroy__ = _zVKN_swig.delete_preamble_adder_c_bb_sptr
    __del__ = lambda self: None

    def make(self, prb_val, prb_len):
        """
        make(preamble_adder_c_bb_sptr self, int prb_val, int prb_len) -> preamble_adder_c_bb_sptr

        Return a shared_ptr to a new instance of zVKN::preamble_adder_c_bb.

        To avoid accidental use of raw pointers, zVKN::preamble_adder_c_bb's constructor is in a private implementation class. zVKN::preamble_adder_c_bb::make is the public interface for creating new instances.

        Params: (prb_val, prb_len)
        """
        return _zVKN_swig.preamble_adder_c_bb_sptr_make(self, prb_val, prb_len)


    def history(self):
        """history(preamble_adder_c_bb_sptr self) -> unsigned int"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(preamble_adder_c_bb_sptr self, int which, int delay)
        declare_sample_delay(preamble_adder_c_bb_sptr self, unsigned int delay)
        """
        return _zVKN_swig.preamble_adder_c_bb_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(preamble_adder_c_bb_sptr self, int which) -> unsigned int"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(preamble_adder_c_bb_sptr self) -> int"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(preamble_adder_c_bb_sptr self) -> double"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_relative_rate(self)


    def start(self):
        """start(preamble_adder_c_bb_sptr self) -> bool"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_start(self)


    def stop(self):
        """stop(preamble_adder_c_bb_sptr self) -> bool"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(preamble_adder_c_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(preamble_adder_c_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(preamble_adder_c_bb_sptr self) -> int"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(preamble_adder_c_bb_sptr self, int m)"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(preamble_adder_c_bb_sptr self)"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(preamble_adder_c_bb_sptr self) -> bool"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(preamble_adder_c_bb_sptr self, int m)"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(preamble_adder_c_bb_sptr self) -> int"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(preamble_adder_c_bb_sptr self, int i) -> long"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(preamble_adder_c_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(preamble_adder_c_bb_sptr self, int port, long max_output_buffer)
        """
        return _zVKN_swig.preamble_adder_c_bb_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(preamble_adder_c_bb_sptr self, int i) -> long"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(preamble_adder_c_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(preamble_adder_c_bb_sptr self, int port, long min_output_buffer)
        """
        return _zVKN_swig.preamble_adder_c_bb_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(preamble_adder_c_bb_sptr self) -> float"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(preamble_adder_c_bb_sptr self) -> float"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(preamble_adder_c_bb_sptr self) -> float"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(preamble_adder_c_bb_sptr self) -> float"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(preamble_adder_c_bb_sptr self) -> float"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(preamble_adder_c_bb_sptr self) -> float"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(preamble_adder_c_bb_sptr self, int which) -> float
        pc_input_buffers_full(preamble_adder_c_bb_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.preamble_adder_c_bb_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(preamble_adder_c_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(preamble_adder_c_bb_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.preamble_adder_c_bb_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(preamble_adder_c_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(preamble_adder_c_bb_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.preamble_adder_c_bb_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(preamble_adder_c_bb_sptr self, int which) -> float
        pc_output_buffers_full(preamble_adder_c_bb_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.preamble_adder_c_bb_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(preamble_adder_c_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(preamble_adder_c_bb_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.preamble_adder_c_bb_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(preamble_adder_c_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(preamble_adder_c_bb_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.preamble_adder_c_bb_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(preamble_adder_c_bb_sptr self) -> float"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(preamble_adder_c_bb_sptr self) -> float"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(preamble_adder_c_bb_sptr self) -> float"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(preamble_adder_c_bb_sptr self) -> float"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(preamble_adder_c_bb_sptr self) -> float"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(preamble_adder_c_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(preamble_adder_c_bb_sptr self)"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(preamble_adder_c_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(preamble_adder_c_bb_sptr self) -> int"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(preamble_adder_c_bb_sptr self) -> int"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(preamble_adder_c_bb_sptr self, int priority) -> int"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(preamble_adder_c_bb_sptr self) -> std::string"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_name(self)


    def symbol_name(self):
        """symbol_name(preamble_adder_c_bb_sptr self) -> std::string"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(preamble_adder_c_bb_sptr self) -> io_signature_sptr"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(preamble_adder_c_bb_sptr self) -> io_signature_sptr"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(preamble_adder_c_bb_sptr self) -> long"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(preamble_adder_c_bb_sptr self) -> basic_block_sptr"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(preamble_adder_c_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(preamble_adder_c_bb_sptr self) -> std::string"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(preamble_adder_c_bb_sptr self, std::string name)"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(preamble_adder_c_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _zVKN_swig.preamble_adder_c_bb_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(preamble_adder_c_bb_sptr self) -> swig_int_ptr"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(preamble_adder_c_bb_sptr self) -> swig_int_ptr"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(preamble_adder_c_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _zVKN_swig.preamble_adder_c_bb_sptr_message_subscribers(self, which_port)

preamble_adder_c_bb_sptr_swigregister = _zVKN_swig.preamble_adder_c_bb_sptr_swigregister
preamble_adder_c_bb_sptr_swigregister(preamble_adder_c_bb_sptr)


preamble_adder_c_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
preamble_adder_c_bb = preamble_adder_c_bb.make;

class preamble_adder_tag_c_bb(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(*args, **kwargs):
        """
        make(int prb_val, int prb_len, std::string const & len_tag_key) -> preamble_adder_tag_c_bb_sptr

        Return a shared_ptr to a new instance of zVKN::preamble_adder_tag_c_bb.

        To avoid accidental use of raw pointers, zVKN::preamble_adder_tag_c_bb's constructor is in a private implementation class. zVKN::preamble_adder_tag_c_bb::make is the public interface for creating new instances.

        Params: (prb_val, prb_len, len_tag_key)
        """
        return _zVKN_swig.preamble_adder_tag_c_bb_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _zVKN_swig.delete_preamble_adder_tag_c_bb
    __del__ = lambda self: None
preamble_adder_tag_c_bb_swigregister = _zVKN_swig.preamble_adder_tag_c_bb_swigregister
preamble_adder_tag_c_bb_swigregister(preamble_adder_tag_c_bb)

def preamble_adder_tag_c_bb_make(*args, **kwargs):
    """
    preamble_adder_tag_c_bb_make(int prb_val, int prb_len, std::string const & len_tag_key) -> preamble_adder_tag_c_bb_sptr

    Return a shared_ptr to a new instance of zVKN::preamble_adder_tag_c_bb.

    To avoid accidental use of raw pointers, zVKN::preamble_adder_tag_c_bb's constructor is in a private implementation class. zVKN::preamble_adder_tag_c_bb::make is the public interface for creating new instances.

    Params: (prb_val, prb_len, len_tag_key)
    """
    return _zVKN_swig.preamble_adder_tag_c_bb_make(*args, **kwargs)

class preamble_adder_tag_c_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::zVKN::preamble_adder_tag_c_bb)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::zVKN::preamble_adder_tag_c_bb)> self) -> preamble_adder_tag_c_bb_sptr
        __init__(boost::shared_ptr<(gr::zVKN::preamble_adder_tag_c_bb)> self, preamble_adder_tag_c_bb p) -> preamble_adder_tag_c_bb_sptr
        """
        this = _zVKN_swig.new_preamble_adder_tag_c_bb_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(preamble_adder_tag_c_bb_sptr self) -> preamble_adder_tag_c_bb"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr___deref__(self)

    __swig_destroy__ = _zVKN_swig.delete_preamble_adder_tag_c_bb_sptr
    __del__ = lambda self: None

    def make(self, *args, **kwargs):
        """
        make(preamble_adder_tag_c_bb_sptr self, int prb_val, int prb_len, std::string const & len_tag_key) -> preamble_adder_tag_c_bb_sptr

        Return a shared_ptr to a new instance of zVKN::preamble_adder_tag_c_bb.

        To avoid accidental use of raw pointers, zVKN::preamble_adder_tag_c_bb's constructor is in a private implementation class. zVKN::preamble_adder_tag_c_bb::make is the public interface for creating new instances.

        Params: (prb_val, prb_len, len_tag_key)
        """
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_make(self, *args, **kwargs)


    def history(self):
        """history(preamble_adder_tag_c_bb_sptr self) -> unsigned int"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(preamble_adder_tag_c_bb_sptr self, int which, int delay)
        declare_sample_delay(preamble_adder_tag_c_bb_sptr self, unsigned int delay)
        """
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(preamble_adder_tag_c_bb_sptr self, int which) -> unsigned int"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(preamble_adder_tag_c_bb_sptr self) -> int"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(preamble_adder_tag_c_bb_sptr self) -> double"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_relative_rate(self)


    def start(self):
        """start(preamble_adder_tag_c_bb_sptr self) -> bool"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_start(self)


    def stop(self):
        """stop(preamble_adder_tag_c_bb_sptr self) -> bool"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(preamble_adder_tag_c_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(preamble_adder_tag_c_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(preamble_adder_tag_c_bb_sptr self) -> int"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(preamble_adder_tag_c_bb_sptr self, int m)"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(preamble_adder_tag_c_bb_sptr self)"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(preamble_adder_tag_c_bb_sptr self) -> bool"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(preamble_adder_tag_c_bb_sptr self, int m)"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(preamble_adder_tag_c_bb_sptr self) -> int"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(preamble_adder_tag_c_bb_sptr self, int i) -> long"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(preamble_adder_tag_c_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(preamble_adder_tag_c_bb_sptr self, int port, long max_output_buffer)
        """
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(preamble_adder_tag_c_bb_sptr self, int i) -> long"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(preamble_adder_tag_c_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(preamble_adder_tag_c_bb_sptr self, int port, long min_output_buffer)
        """
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(preamble_adder_tag_c_bb_sptr self) -> float"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(preamble_adder_tag_c_bb_sptr self) -> float"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(preamble_adder_tag_c_bb_sptr self) -> float"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(preamble_adder_tag_c_bb_sptr self) -> float"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(preamble_adder_tag_c_bb_sptr self) -> float"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(preamble_adder_tag_c_bb_sptr self) -> float"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(preamble_adder_tag_c_bb_sptr self, int which) -> float
        pc_input_buffers_full(preamble_adder_tag_c_bb_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(preamble_adder_tag_c_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(preamble_adder_tag_c_bb_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(preamble_adder_tag_c_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(preamble_adder_tag_c_bb_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(preamble_adder_tag_c_bb_sptr self, int which) -> float
        pc_output_buffers_full(preamble_adder_tag_c_bb_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(preamble_adder_tag_c_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(preamble_adder_tag_c_bb_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(preamble_adder_tag_c_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(preamble_adder_tag_c_bb_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(preamble_adder_tag_c_bb_sptr self) -> float"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(preamble_adder_tag_c_bb_sptr self) -> float"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(preamble_adder_tag_c_bb_sptr self) -> float"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(preamble_adder_tag_c_bb_sptr self) -> float"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(preamble_adder_tag_c_bb_sptr self) -> float"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(preamble_adder_tag_c_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(preamble_adder_tag_c_bb_sptr self)"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(preamble_adder_tag_c_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(preamble_adder_tag_c_bb_sptr self) -> int"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(preamble_adder_tag_c_bb_sptr self) -> int"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(preamble_adder_tag_c_bb_sptr self, int priority) -> int"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(preamble_adder_tag_c_bb_sptr self) -> std::string"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_name(self)


    def symbol_name(self):
        """symbol_name(preamble_adder_tag_c_bb_sptr self) -> std::string"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(preamble_adder_tag_c_bb_sptr self) -> io_signature_sptr"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(preamble_adder_tag_c_bb_sptr self) -> io_signature_sptr"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(preamble_adder_tag_c_bb_sptr self) -> long"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(preamble_adder_tag_c_bb_sptr self) -> basic_block_sptr"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(preamble_adder_tag_c_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(preamble_adder_tag_c_bb_sptr self) -> std::string"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(preamble_adder_tag_c_bb_sptr self, std::string name)"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(preamble_adder_tag_c_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(preamble_adder_tag_c_bb_sptr self) -> swig_int_ptr"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(preamble_adder_tag_c_bb_sptr self) -> swig_int_ptr"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(preamble_adder_tag_c_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _zVKN_swig.preamble_adder_tag_c_bb_sptr_message_subscribers(self, which_port)

preamble_adder_tag_c_bb_sptr_swigregister = _zVKN_swig.preamble_adder_tag_c_bb_sptr_swigregister
preamble_adder_tag_c_bb_sptr_swigregister(preamble_adder_tag_c_bb_sptr)


preamble_adder_tag_c_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
preamble_adder_tag_c_bb = preamble_adder_tag_c_bb.make;

class psk_mapper_c_bc(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(M, PO, R):
        """
        make(int M, float PO, bool R) -> psk_mapper_c_bc_sptr

        M = Modulation order (up to 64)

        PO = Constellation phase offset [deg]

        R = Constellation rotation

        Params: (M, PO, R)
        """
        return _zVKN_swig.psk_mapper_c_bc_make(M, PO, R)

    make = staticmethod(make)
    __swig_destroy__ = _zVKN_swig.delete_psk_mapper_c_bc
    __del__ = lambda self: None
psk_mapper_c_bc_swigregister = _zVKN_swig.psk_mapper_c_bc_swigregister
psk_mapper_c_bc_swigregister(psk_mapper_c_bc)

def psk_mapper_c_bc_make(M, PO, R):
    """
    psk_mapper_c_bc_make(int M, float PO, bool R) -> psk_mapper_c_bc_sptr

    M = Modulation order (up to 64)

    PO = Constellation phase offset [deg]

    R = Constellation rotation

    Params: (M, PO, R)
    """
    return _zVKN_swig.psk_mapper_c_bc_make(M, PO, R)

class psk_mapper_c_bc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::zVKN::psk_mapper_c_bc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::zVKN::psk_mapper_c_bc)> self) -> psk_mapper_c_bc_sptr
        __init__(boost::shared_ptr<(gr::zVKN::psk_mapper_c_bc)> self, psk_mapper_c_bc p) -> psk_mapper_c_bc_sptr
        """
        this = _zVKN_swig.new_psk_mapper_c_bc_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(psk_mapper_c_bc_sptr self) -> psk_mapper_c_bc"""
        return _zVKN_swig.psk_mapper_c_bc_sptr___deref__(self)

    __swig_destroy__ = _zVKN_swig.delete_psk_mapper_c_bc_sptr
    __del__ = lambda self: None

    def make(self, M, PO, R):
        """
        make(psk_mapper_c_bc_sptr self, int M, float PO, bool R) -> psk_mapper_c_bc_sptr

        M = Modulation order (up to 64)

        PO = Constellation phase offset [deg]

        R = Constellation rotation

        Params: (M, PO, R)
        """
        return _zVKN_swig.psk_mapper_c_bc_sptr_make(self, M, PO, R)


    def history(self):
        """history(psk_mapper_c_bc_sptr self) -> unsigned int"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(psk_mapper_c_bc_sptr self, int which, int delay)
        declare_sample_delay(psk_mapper_c_bc_sptr self, unsigned int delay)
        """
        return _zVKN_swig.psk_mapper_c_bc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(psk_mapper_c_bc_sptr self, int which) -> unsigned int"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(psk_mapper_c_bc_sptr self) -> int"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(psk_mapper_c_bc_sptr self) -> double"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_relative_rate(self)


    def start(self):
        """start(psk_mapper_c_bc_sptr self) -> bool"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_start(self)


    def stop(self):
        """stop(psk_mapper_c_bc_sptr self) -> bool"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(psk_mapper_c_bc_sptr self, unsigned int which_input) -> uint64_t"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(psk_mapper_c_bc_sptr self, unsigned int which_output) -> uint64_t"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(psk_mapper_c_bc_sptr self) -> int"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(psk_mapper_c_bc_sptr self, int m)"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(psk_mapper_c_bc_sptr self)"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(psk_mapper_c_bc_sptr self) -> bool"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(psk_mapper_c_bc_sptr self, int m)"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(psk_mapper_c_bc_sptr self) -> int"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(psk_mapper_c_bc_sptr self, int i) -> long"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(psk_mapper_c_bc_sptr self, long max_output_buffer)
        set_max_output_buffer(psk_mapper_c_bc_sptr self, int port, long max_output_buffer)
        """
        return _zVKN_swig.psk_mapper_c_bc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(psk_mapper_c_bc_sptr self, int i) -> long"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(psk_mapper_c_bc_sptr self, long min_output_buffer)
        set_min_output_buffer(psk_mapper_c_bc_sptr self, int port, long min_output_buffer)
        """
        return _zVKN_swig.psk_mapper_c_bc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(psk_mapper_c_bc_sptr self) -> float"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(psk_mapper_c_bc_sptr self) -> float"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(psk_mapper_c_bc_sptr self) -> float"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(psk_mapper_c_bc_sptr self) -> float"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(psk_mapper_c_bc_sptr self) -> float"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(psk_mapper_c_bc_sptr self) -> float"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(psk_mapper_c_bc_sptr self, int which) -> float
        pc_input_buffers_full(psk_mapper_c_bc_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.psk_mapper_c_bc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(psk_mapper_c_bc_sptr self, int which) -> float
        pc_input_buffers_full_avg(psk_mapper_c_bc_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.psk_mapper_c_bc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(psk_mapper_c_bc_sptr self, int which) -> float
        pc_input_buffers_full_var(psk_mapper_c_bc_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.psk_mapper_c_bc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(psk_mapper_c_bc_sptr self, int which) -> float
        pc_output_buffers_full(psk_mapper_c_bc_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.psk_mapper_c_bc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(psk_mapper_c_bc_sptr self, int which) -> float
        pc_output_buffers_full_avg(psk_mapper_c_bc_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.psk_mapper_c_bc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(psk_mapper_c_bc_sptr self, int which) -> float
        pc_output_buffers_full_var(psk_mapper_c_bc_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.psk_mapper_c_bc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(psk_mapper_c_bc_sptr self) -> float"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(psk_mapper_c_bc_sptr self) -> float"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(psk_mapper_c_bc_sptr self) -> float"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(psk_mapper_c_bc_sptr self) -> float"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(psk_mapper_c_bc_sptr self) -> float"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(psk_mapper_c_bc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(psk_mapper_c_bc_sptr self)"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(psk_mapper_c_bc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(psk_mapper_c_bc_sptr self) -> int"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(psk_mapper_c_bc_sptr self) -> int"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(psk_mapper_c_bc_sptr self, int priority) -> int"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(psk_mapper_c_bc_sptr self) -> std::string"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(psk_mapper_c_bc_sptr self) -> std::string"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(psk_mapper_c_bc_sptr self) -> io_signature_sptr"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(psk_mapper_c_bc_sptr self) -> io_signature_sptr"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(psk_mapper_c_bc_sptr self) -> long"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(psk_mapper_c_bc_sptr self) -> basic_block_sptr"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(psk_mapper_c_bc_sptr self, int ninputs, int noutputs) -> bool"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(psk_mapper_c_bc_sptr self) -> std::string"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(psk_mapper_c_bc_sptr self, std::string name)"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(psk_mapper_c_bc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _zVKN_swig.psk_mapper_c_bc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(psk_mapper_c_bc_sptr self) -> swig_int_ptr"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(psk_mapper_c_bc_sptr self) -> swig_int_ptr"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(psk_mapper_c_bc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _zVKN_swig.psk_mapper_c_bc_sptr_message_subscribers(self, which_port)

psk_mapper_c_bc_sptr_swigregister = _zVKN_swig.psk_mapper_c_bc_sptr_swigregister
psk_mapper_c_bc_sptr_swigregister(psk_mapper_c_bc_sptr)


psk_mapper_c_bc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
psk_mapper_c_bc = psk_mapper_c_bc.make;

class srrc_filter_tx_c_cc(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(sps, span, beta):
        """
        make(int sps, int span, float beta) -> srrc_filter_tx_c_cc_sptr

        Return a shared_ptr to a new instance of zVKN::srrc_filter_tx_c_cc.

        To avoid accidental use of raw pointers, zVKN::srrc_filter_tx_c_cc's constructor is in a private implementation class. zVKN::srrc_filter_tx_c_cc::make is the public interface for creating new instances.

        Params: (sps, span, beta)
        """
        return _zVKN_swig.srrc_filter_tx_c_cc_make(sps, span, beta)

    make = staticmethod(make)
    __swig_destroy__ = _zVKN_swig.delete_srrc_filter_tx_c_cc
    __del__ = lambda self: None
srrc_filter_tx_c_cc_swigregister = _zVKN_swig.srrc_filter_tx_c_cc_swigregister
srrc_filter_tx_c_cc_swigregister(srrc_filter_tx_c_cc)

def srrc_filter_tx_c_cc_make(sps, span, beta):
    """
    srrc_filter_tx_c_cc_make(int sps, int span, float beta) -> srrc_filter_tx_c_cc_sptr

    Return a shared_ptr to a new instance of zVKN::srrc_filter_tx_c_cc.

    To avoid accidental use of raw pointers, zVKN::srrc_filter_tx_c_cc's constructor is in a private implementation class. zVKN::srrc_filter_tx_c_cc::make is the public interface for creating new instances.

    Params: (sps, span, beta)
    """
    return _zVKN_swig.srrc_filter_tx_c_cc_make(sps, span, beta)

class srrc_filter_tx_c_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::zVKN::srrc_filter_tx_c_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::zVKN::srrc_filter_tx_c_cc)> self) -> srrc_filter_tx_c_cc_sptr
        __init__(boost::shared_ptr<(gr::zVKN::srrc_filter_tx_c_cc)> self, srrc_filter_tx_c_cc p) -> srrc_filter_tx_c_cc_sptr
        """
        this = _zVKN_swig.new_srrc_filter_tx_c_cc_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(srrc_filter_tx_c_cc_sptr self) -> srrc_filter_tx_c_cc"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr___deref__(self)

    __swig_destroy__ = _zVKN_swig.delete_srrc_filter_tx_c_cc_sptr
    __del__ = lambda self: None

    def make(self, sps, span, beta):
        """
        make(srrc_filter_tx_c_cc_sptr self, int sps, int span, float beta) -> srrc_filter_tx_c_cc_sptr

        Return a shared_ptr to a new instance of zVKN::srrc_filter_tx_c_cc.

        To avoid accidental use of raw pointers, zVKN::srrc_filter_tx_c_cc's constructor is in a private implementation class. zVKN::srrc_filter_tx_c_cc::make is the public interface for creating new instances.

        Params: (sps, span, beta)
        """
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_make(self, sps, span, beta)


    def history(self):
        """history(srrc_filter_tx_c_cc_sptr self) -> unsigned int"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(srrc_filter_tx_c_cc_sptr self, int which, int delay)
        declare_sample_delay(srrc_filter_tx_c_cc_sptr self, unsigned int delay)
        """
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(srrc_filter_tx_c_cc_sptr self, int which) -> unsigned int"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(srrc_filter_tx_c_cc_sptr self) -> int"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(srrc_filter_tx_c_cc_sptr self) -> double"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_relative_rate(self)


    def start(self):
        """start(srrc_filter_tx_c_cc_sptr self) -> bool"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_start(self)


    def stop(self):
        """stop(srrc_filter_tx_c_cc_sptr self) -> bool"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(srrc_filter_tx_c_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(srrc_filter_tx_c_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(srrc_filter_tx_c_cc_sptr self) -> int"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(srrc_filter_tx_c_cc_sptr self, int m)"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(srrc_filter_tx_c_cc_sptr self)"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(srrc_filter_tx_c_cc_sptr self) -> bool"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(srrc_filter_tx_c_cc_sptr self, int m)"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(srrc_filter_tx_c_cc_sptr self) -> int"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(srrc_filter_tx_c_cc_sptr self, int i) -> long"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(srrc_filter_tx_c_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(srrc_filter_tx_c_cc_sptr self, int port, long max_output_buffer)
        """
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(srrc_filter_tx_c_cc_sptr self, int i) -> long"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(srrc_filter_tx_c_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(srrc_filter_tx_c_cc_sptr self, int port, long min_output_buffer)
        """
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(srrc_filter_tx_c_cc_sptr self) -> float"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(srrc_filter_tx_c_cc_sptr self) -> float"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(srrc_filter_tx_c_cc_sptr self) -> float"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(srrc_filter_tx_c_cc_sptr self) -> float"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(srrc_filter_tx_c_cc_sptr self) -> float"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(srrc_filter_tx_c_cc_sptr self) -> float"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(srrc_filter_tx_c_cc_sptr self, int which) -> float
        pc_input_buffers_full(srrc_filter_tx_c_cc_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(srrc_filter_tx_c_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(srrc_filter_tx_c_cc_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(srrc_filter_tx_c_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(srrc_filter_tx_c_cc_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(srrc_filter_tx_c_cc_sptr self, int which) -> float
        pc_output_buffers_full(srrc_filter_tx_c_cc_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(srrc_filter_tx_c_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(srrc_filter_tx_c_cc_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(srrc_filter_tx_c_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(srrc_filter_tx_c_cc_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(srrc_filter_tx_c_cc_sptr self) -> float"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(srrc_filter_tx_c_cc_sptr self) -> float"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(srrc_filter_tx_c_cc_sptr self) -> float"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(srrc_filter_tx_c_cc_sptr self) -> float"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(srrc_filter_tx_c_cc_sptr self) -> float"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(srrc_filter_tx_c_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(srrc_filter_tx_c_cc_sptr self)"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(srrc_filter_tx_c_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(srrc_filter_tx_c_cc_sptr self) -> int"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(srrc_filter_tx_c_cc_sptr self) -> int"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(srrc_filter_tx_c_cc_sptr self, int priority) -> int"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(srrc_filter_tx_c_cc_sptr self) -> std::string"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(srrc_filter_tx_c_cc_sptr self) -> std::string"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(srrc_filter_tx_c_cc_sptr self) -> io_signature_sptr"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(srrc_filter_tx_c_cc_sptr self) -> io_signature_sptr"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(srrc_filter_tx_c_cc_sptr self) -> long"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(srrc_filter_tx_c_cc_sptr self) -> basic_block_sptr"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(srrc_filter_tx_c_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(srrc_filter_tx_c_cc_sptr self) -> std::string"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(srrc_filter_tx_c_cc_sptr self, std::string name)"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(srrc_filter_tx_c_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(srrc_filter_tx_c_cc_sptr self) -> swig_int_ptr"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(srrc_filter_tx_c_cc_sptr self) -> swig_int_ptr"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(srrc_filter_tx_c_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _zVKN_swig.srrc_filter_tx_c_cc_sptr_message_subscribers(self, which_port)

srrc_filter_tx_c_cc_sptr_swigregister = _zVKN_swig.srrc_filter_tx_c_cc_sptr_swigregister
srrc_filter_tx_c_cc_sptr_swigregister(srrc_filter_tx_c_cc_sptr)


srrc_filter_tx_c_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
srrc_filter_tx_c_cc = srrc_filter_tx_c_cc.make;

class srrc_filter_rx_c_cc(object):
    """Proxy of C++ gr::zVKN::srrc_filter_rx_c_cc class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(sps, span, beta):
        """make(int sps, int span, float beta) -> srrc_filter_rx_c_cc_sptr"""
        return _zVKN_swig.srrc_filter_rx_c_cc_make(sps, span, beta)

    make = staticmethod(make)
    __swig_destroy__ = _zVKN_swig.delete_srrc_filter_rx_c_cc
    __del__ = lambda self: None
srrc_filter_rx_c_cc_swigregister = _zVKN_swig.srrc_filter_rx_c_cc_swigregister
srrc_filter_rx_c_cc_swigregister(srrc_filter_rx_c_cc)

def srrc_filter_rx_c_cc_make(sps, span, beta):
    """srrc_filter_rx_c_cc_make(int sps, int span, float beta) -> srrc_filter_rx_c_cc_sptr"""
    return _zVKN_swig.srrc_filter_rx_c_cc_make(sps, span, beta)

class srrc_filter_rx_c_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::zVKN::srrc_filter_rx_c_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::zVKN::srrc_filter_rx_c_cc)> self) -> srrc_filter_rx_c_cc_sptr
        __init__(boost::shared_ptr<(gr::zVKN::srrc_filter_rx_c_cc)> self, srrc_filter_rx_c_cc p) -> srrc_filter_rx_c_cc_sptr
        """
        this = _zVKN_swig.new_srrc_filter_rx_c_cc_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(srrc_filter_rx_c_cc_sptr self) -> srrc_filter_rx_c_cc"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr___deref__(self)

    __swig_destroy__ = _zVKN_swig.delete_srrc_filter_rx_c_cc_sptr
    __del__ = lambda self: None

    def make(self, sps, span, beta):
        """make(srrc_filter_rx_c_cc_sptr self, int sps, int span, float beta) -> srrc_filter_rx_c_cc_sptr"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_make(self, sps, span, beta)


    def history(self):
        """history(srrc_filter_rx_c_cc_sptr self) -> unsigned int"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(srrc_filter_rx_c_cc_sptr self, int which, int delay)
        declare_sample_delay(srrc_filter_rx_c_cc_sptr self, unsigned int delay)
        """
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(srrc_filter_rx_c_cc_sptr self, int which) -> unsigned int"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(srrc_filter_rx_c_cc_sptr self) -> int"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(srrc_filter_rx_c_cc_sptr self) -> double"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_relative_rate(self)


    def start(self):
        """start(srrc_filter_rx_c_cc_sptr self) -> bool"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_start(self)


    def stop(self):
        """stop(srrc_filter_rx_c_cc_sptr self) -> bool"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(srrc_filter_rx_c_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(srrc_filter_rx_c_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(srrc_filter_rx_c_cc_sptr self) -> int"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(srrc_filter_rx_c_cc_sptr self, int m)"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(srrc_filter_rx_c_cc_sptr self)"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(srrc_filter_rx_c_cc_sptr self) -> bool"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(srrc_filter_rx_c_cc_sptr self, int m)"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(srrc_filter_rx_c_cc_sptr self) -> int"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(srrc_filter_rx_c_cc_sptr self, int i) -> long"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(srrc_filter_rx_c_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(srrc_filter_rx_c_cc_sptr self, int port, long max_output_buffer)
        """
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(srrc_filter_rx_c_cc_sptr self, int i) -> long"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(srrc_filter_rx_c_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(srrc_filter_rx_c_cc_sptr self, int port, long min_output_buffer)
        """
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(srrc_filter_rx_c_cc_sptr self) -> float"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(srrc_filter_rx_c_cc_sptr self) -> float"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(srrc_filter_rx_c_cc_sptr self) -> float"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(srrc_filter_rx_c_cc_sptr self) -> float"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(srrc_filter_rx_c_cc_sptr self) -> float"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(srrc_filter_rx_c_cc_sptr self) -> float"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(srrc_filter_rx_c_cc_sptr self, int which) -> float
        pc_input_buffers_full(srrc_filter_rx_c_cc_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(srrc_filter_rx_c_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(srrc_filter_rx_c_cc_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(srrc_filter_rx_c_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(srrc_filter_rx_c_cc_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(srrc_filter_rx_c_cc_sptr self, int which) -> float
        pc_output_buffers_full(srrc_filter_rx_c_cc_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(srrc_filter_rx_c_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(srrc_filter_rx_c_cc_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(srrc_filter_rx_c_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(srrc_filter_rx_c_cc_sptr self) -> pmt_vector_float
        """
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(srrc_filter_rx_c_cc_sptr self) -> float"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(srrc_filter_rx_c_cc_sptr self) -> float"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(srrc_filter_rx_c_cc_sptr self) -> float"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(srrc_filter_rx_c_cc_sptr self) -> float"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(srrc_filter_rx_c_cc_sptr self) -> float"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(srrc_filter_rx_c_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(srrc_filter_rx_c_cc_sptr self)"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(srrc_filter_rx_c_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(srrc_filter_rx_c_cc_sptr self) -> int"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(srrc_filter_rx_c_cc_sptr self) -> int"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(srrc_filter_rx_c_cc_sptr self, int priority) -> int"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(srrc_filter_rx_c_cc_sptr self) -> std::string"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(srrc_filter_rx_c_cc_sptr self) -> std::string"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(srrc_filter_rx_c_cc_sptr self) -> io_signature_sptr"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(srrc_filter_rx_c_cc_sptr self) -> io_signature_sptr"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(srrc_filter_rx_c_cc_sptr self) -> long"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(srrc_filter_rx_c_cc_sptr self) -> basic_block_sptr"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(srrc_filter_rx_c_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(srrc_filter_rx_c_cc_sptr self) -> std::string"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(srrc_filter_rx_c_cc_sptr self, std::string name)"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(srrc_filter_rx_c_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(srrc_filter_rx_c_cc_sptr self) -> swig_int_ptr"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(srrc_filter_rx_c_cc_sptr self) -> swig_int_ptr"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(srrc_filter_rx_c_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _zVKN_swig.srrc_filter_rx_c_cc_sptr_message_subscribers(self, which_port)

srrc_filter_rx_c_cc_sptr_swigregister = _zVKN_swig.srrc_filter_rx_c_cc_sptr_swigregister
srrc_filter_rx_c_cc_sptr_swigregister(srrc_filter_rx_c_cc_sptr)


srrc_filter_rx_c_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
srrc_filter_rx_c_cc = srrc_filter_rx_c_cc.make;



